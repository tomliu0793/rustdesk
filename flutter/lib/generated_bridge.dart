// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.80.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'generated_bridge.freezed.dart';

abstract class Rustdesk {
  Stream<String> startGlobalEventStream(
      {required String appType, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartGlobalEventStreamConstMeta;

  Future<void> stopGlobalEventStream({required String appType, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopGlobalEventStreamConstMeta;

  Future<void> hostStopSystemKeyPropagate(
      {required bool stopped, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHostStopSystemKeyPropagateConstMeta;

  int peerGetDefaultSessionsCount({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPeerGetDefaultSessionsCountConstMeta;

  String sessionAddExistedSync(
      {required String id,
      required UuidValue sessionId,
      required Int32List displays,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionAddExistedSyncConstMeta;

  String sessionAddSync(
      {required UuidValue sessionId,
      required String id,
      required bool isFileTransfer,
      required bool isPortForward,
      required bool isRdp,
      required String switchUuid,
      required bool forceRelay,
      required String password,
      required bool isSharedPassword,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionAddSyncConstMeta;

  Stream<EventToUI> sessionStart(
      {required UuidValue sessionId, required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionStartConstMeta;

  Stream<EventToUI> sessionStartWithDisplays(
      {required UuidValue sessionId,
      required String id,
      required Int32List displays,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionStartWithDisplaysConstMeta;

  Future<bool?> sessionGetRemember(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetRememberConstMeta;

  Future<bool?> sessionGetToggleOption(
      {required UuidValue sessionId, required String arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetToggleOptionConstMeta;

  bool sessionGetToggleOptionSync(
      {required UuidValue sessionId, required String arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetToggleOptionSyncConstMeta;

  Future<String?> sessionGetOption(
      {required UuidValue sessionId, required String arg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetOptionConstMeta;

  Future<void> sessionLogin(
      {required UuidValue sessionId,
      required String osUsername,
      required String osPassword,
      required String password,
      required bool remember,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionLoginConstMeta;

  Future<void> sessionSend2Fa(
      {required UuidValue sessionId,
      required String code,
      required bool trustThisDevice,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSend2FaConstMeta;

  bool sessionGetEnableTrustedDevices(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetEnableTrustedDevicesConstMeta;

  Future<void> sessionClose({required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionCloseConstMeta;

  Future<void> sessionRefresh(
      {required UuidValue sessionId, required int display, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionRefreshConstMeta;

  bool sessionIsMultiUiSession({required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionIsMultiUiSessionConstMeta;

  Future<void> sessionRecordScreen(
      {required UuidValue sessionId,
      required bool start,
      required int display,
      required int width,
      required int height,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionRecordScreenConstMeta;

  Future<void> sessionRecordStatus(
      {required UuidValue sessionId, required bool status, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionRecordStatusConstMeta;

  Future<void> sessionReconnect(
      {required UuidValue sessionId, required bool forceRelay, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionReconnectConstMeta;

  Future<void> sessionToggleOption(
      {required UuidValue sessionId, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionToggleOptionConstMeta;

  Future<void> sessionTogglePrivacyMode(
      {required UuidValue sessionId,
      required String implKey,
      required bool on,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionTogglePrivacyModeConstMeta;

  Future<String?> sessionGetFlutterOption(
      {required UuidValue sessionId, required String k, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetFlutterOptionConstMeta;

  Future<void> sessionSetFlutterOption(
      {required UuidValue sessionId,
      required String k,
      required String v,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSetFlutterOptionConstMeta;

  int getNextTextureKey({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetNextTextureKeyConstMeta;

  String getLocalFlutterOption({required String k, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetLocalFlutterOptionConstMeta;

  Future<void> setLocalFlutterOption(
      {required String k, required String v, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetLocalFlutterOptionConstMeta;

  String getLocalKbLayoutType({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetLocalKbLayoutTypeConstMeta;

  Future<void> setLocalKbLayoutType(
      {required String kbLayoutType, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetLocalKbLayoutTypeConstMeta;

  Future<String?> sessionGetViewStyle(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetViewStyleConstMeta;

  Future<void> sessionSetViewStyle(
      {required UuidValue sessionId, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSetViewStyleConstMeta;

  Future<String?> sessionGetScrollStyle(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetScrollStyleConstMeta;

  Future<void> sessionSetScrollStyle(
      {required UuidValue sessionId, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSetScrollStyleConstMeta;

  Future<String?> sessionGetImageQuality(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetImageQualityConstMeta;

  Future<void> sessionSetImageQuality(
      {required UuidValue sessionId, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSetImageQualityConstMeta;

  Future<String?> sessionGetKeyboardMode(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetKeyboardModeConstMeta;

  Future<void> sessionSetKeyboardMode(
      {required UuidValue sessionId, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSetKeyboardModeConstMeta;

  String? sessionGetReverseMouseWheelSync(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetReverseMouseWheelSyncConstMeta;

  Future<void> sessionSetReverseMouseWheel(
      {required UuidValue sessionId, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSetReverseMouseWheelConstMeta;

  String? sessionGetDisplaysAsIndividualWindows(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSessionGetDisplaysAsIndividualWindowsConstMeta;

  Future<void> sessionSetDisplaysAsIndividualWindows(
      {required UuidValue sessionId, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSessionSetDisplaysAsIndividualWindowsConstMeta;

  String? sessionGetUseAllMyDisplaysForTheRemoteSession(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSessionGetUseAllMyDisplaysForTheRemoteSessionConstMeta;

  Future<void> sessionSetUseAllMyDisplaysForTheRemoteSession(
      {required UuidValue sessionId, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSessionSetUseAllMyDisplaysForTheRemoteSessionConstMeta;

  Future<Int32List?> sessionGetCustomImageQuality(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetCustomImageQualityConstMeta;

  bool sessionIsKeyboardModeSupported(
      {required UuidValue sessionId, required String mode, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionIsKeyboardModeSupportedConstMeta;

  Future<void> sessionSetCustomImageQuality(
      {required UuidValue sessionId, required int value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSetCustomImageQualityConstMeta;

  Future<void> sessionSetCustomFps(
      {required UuidValue sessionId, required int fps, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSetCustomFpsConstMeta;

  Future<void> sessionLockScreen({required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionLockScreenConstMeta;

  Future<void> sessionCtrlAltDel({required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionCtrlAltDelConstMeta;

  Future<void> sessionSwitchDisplay(
      {required bool isDesktop,
      required UuidValue sessionId,
      required Int32List value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSwitchDisplayConstMeta;

  Future<void> sessionHandleFlutterKeyEvent(
      {required UuidValue sessionId,
      required String character,
      required int usbHid,
      required int lockModes,
      required bool downOrUp,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionHandleFlutterKeyEventConstMeta;

  Future<void> sessionHandleFlutterRawKeyEvent(
      {required UuidValue sessionId,
      required String name,
      required int platformCode,
      required int positionCode,
      required int lockModes,
      required bool downOrUp,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionHandleFlutterRawKeyEventConstMeta;

  void sessionEnterOrLeave(
      {required UuidValue sessionId, required bool enter, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionEnterOrLeaveConstMeta;

  Future<void> sessionInputKey(
      {required UuidValue sessionId,
      required String name,
      required bool down,
      required bool press,
      required bool alt,
      required bool ctrl,
      required bool shift,
      required bool command,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionInputKeyConstMeta;

  Future<void> sessionInputString(
      {required UuidValue sessionId, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionInputStringConstMeta;

  Future<void> sessionSendChat(
      {required UuidValue sessionId, required String text, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSendChatConstMeta;

  Future<void> sessionPeerOption(
      {required UuidValue sessionId,
      required String name,
      required String value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionPeerOptionConstMeta;

  Future<String> sessionGetPeerOption(
      {required UuidValue sessionId, required String name, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetPeerOptionConstMeta;

  Future<void> sessionInputOsPassword(
      {required UuidValue sessionId, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionInputOsPasswordConstMeta;

  Future<void> sessionReadRemoteDir(
      {required UuidValue sessionId,
      required String path,
      required bool includeHidden,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionReadRemoteDirConstMeta;

  Future<void> sessionSendFiles(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required String to,
      required int fileNum,
      required bool includeHidden,
      required bool isRemote,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSendFilesConstMeta;

  Future<void> sessionSetConfirmOverrideFile(
      {required UuidValue sessionId,
      required int actId,
      required int fileNum,
      required bool needOverride,
      required bool remember,
      required bool isUpload,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSetConfirmOverrideFileConstMeta;

  Future<void> sessionRemoveFile(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required int fileNum,
      required bool isRemote,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionRemoveFileConstMeta;

  Future<void> sessionReadDirRecursive(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required bool isRemote,
      required bool showHidden,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionReadDirRecursiveConstMeta;

  Future<void> sessionRemoveAllEmptyDirs(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required bool isRemote,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionRemoveAllEmptyDirsConstMeta;

  Future<void> sessionCancelJob(
      {required UuidValue sessionId, required int actId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionCancelJobConstMeta;

  Future<void> sessionCreateDir(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required bool isRemote,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionCreateDirConstMeta;

  Future<String> sessionReadLocalDirSync(
      {required UuidValue sessionId,
      required String path,
      required bool showHidden,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionReadLocalDirSyncConstMeta;

  Future<String> sessionGetPlatform(
      {required UuidValue sessionId, required bool isRemote, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetPlatformConstMeta;

  Future<void> sessionLoadLastTransferJobs(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionLoadLastTransferJobsConstMeta;

  Future<void> sessionAddJob(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required String to,
      required int fileNum,
      required bool includeHidden,
      required bool isRemote,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionAddJobConstMeta;

  Future<void> sessionResumeJob(
      {required UuidValue sessionId,
      required int actId,
      required bool isRemote,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionResumeJobConstMeta;

  Future<void> sessionRenameFile(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required String newName,
      required bool isRemote,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionRenameFileConstMeta;

  Future<void> sessionElevateDirect(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionElevateDirectConstMeta;

  Future<void> sessionElevateWithLogon(
      {required UuidValue sessionId,
      required String username,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionElevateWithLogonConstMeta;

  Future<void> sessionSwitchSides({required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSwitchSidesConstMeta;

  Future<void> sessionChangeResolution(
      {required UuidValue sessionId,
      required int display,
      required int width,
      required int height,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionChangeResolutionConstMeta;

  Future<void> sessionSetSize(
      {required UuidValue sessionId,
      required int display,
      required int width,
      required int height,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSetSizeConstMeta;

  Future<void> sessionSendSelectedSessionId(
      {required UuidValue sessionId, required String sid, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSendSelectedSessionIdConstMeta;

  Future<List<String>> mainGetSoundInputs({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetSoundInputsConstMeta;

  Future<String?> mainGetDefaultSoundInput({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetDefaultSoundInputConstMeta;

  String mainGetLoginDeviceInfo({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetLoginDeviceInfoConstMeta;

  Future<void> mainChangeId({required String newId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainChangeIdConstMeta;

  Future<String> mainGetAsyncStatus({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetAsyncStatusConstMeta;

  Future<String?> mainGetHttpStatus({required String url, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetHttpStatusConstMeta;

  Future<String> mainGetOption({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetOptionConstMeta;

  String mainGetOptionSync({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetOptionSyncConstMeta;

  Future<String> mainGetError({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetErrorConstMeta;

  bool mainShowOption({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainShowOptionConstMeta;

  Future<void> mainSetOption(
      {required String key, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetOptionConstMeta;

  Future<String> mainGetOptions({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetOptionsConstMeta;

  String mainGetOptionsSync({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetOptionsSyncConstMeta;

  Future<void> mainSetOptions({required String json, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetOptionsConstMeta;

  Future<String> mainTestIfValidServer(
      {required String server, required bool testWithProxy, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainTestIfValidServerConstMeta;

  Future<void> mainSetSocks(
      {required String proxy,
      required String username,
      required String password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetSocksConstMeta;

  Future<bool> mainGetProxyStatus({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetProxyStatusConstMeta;

  Future<List<String>> mainGetSocks({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetSocksConstMeta;

  Future<String> mainGetAppName({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetAppNameConstMeta;

  String mainGetAppNameSync({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetAppNameSyncConstMeta;

  String mainUriPrefixSync({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainUriPrefixSyncConstMeta;

  Future<String> mainGetLicense({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetLicenseConstMeta;

  Future<String> mainGetVersion({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetVersionConstMeta;

  Future<List<String>> mainGetFav({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetFavConstMeta;

  Future<void> mainStoreFav({required List<String> favs, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainStoreFavConstMeta;

  String mainGetPeerSync({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetPeerSyncConstMeta;

  Future<String> mainGetLanPeers({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetLanPeersConstMeta;

  Future<String> mainGetConnectStatus({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetConnectStatusConstMeta;

  Future<void> mainCheckConnectStatus({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainCheckConnectStatusConstMeta;

  Future<bool> mainIsUsingPublicServer({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainIsUsingPublicServerConstMeta;

  Future<void> mainDiscover({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainDiscoverConstMeta;

  Future<String> mainGetApiServer({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetApiServerConstMeta;

  Future<void> mainHttpRequest(
      {required String url,
      required String method,
      String? body,
      required String header,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainHttpRequestConstMeta;

  String mainGetLocalOption({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetLocalOptionConstMeta;

  bool mainGetUseTextureRender({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetUseTextureRenderConstMeta;

  String mainGetEnv({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetEnvConstMeta;

  Future<void> mainSetLocalOption(
      {required String key, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetLocalOptionConstMeta;

  Future<String> mainHandleWaylandScreencastRestoreToken(
      {required String key, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kMainHandleWaylandScreencastRestoreTokenConstMeta;

  String mainGetInputSource({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetInputSourceConstMeta;

  Future<void> mainSetInputSource(
      {required UuidValue sessionId, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetInputSourceConstMeta;

  Future<String> mainGetMyId({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetMyIdConstMeta;

  Future<String> mainGetUuid({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetUuidConstMeta;

  Future<String> mainGetPeerOption(
      {required String id, required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetPeerOptionConstMeta;

  String mainGetPeerOptionSync(
      {required String id, required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetPeerOptionSyncConstMeta;

  String mainGetPeerFlutterOptionSync(
      {required String id, required String k, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetPeerFlutterOptionSyncConstMeta;

  void mainSetPeerFlutterOptionSync(
      {required String id, required String k, required String v, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetPeerFlutterOptionSyncConstMeta;

  Future<void> mainSetPeerOption(
      {required String id,
      required String key,
      required String value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetPeerOptionConstMeta;

  bool mainSetPeerOptionSync(
      {required String id,
      required String key,
      required String value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetPeerOptionSyncConstMeta;

  Future<void> mainSetPeerAlias(
      {required String id, required String alias, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetPeerAliasConstMeta;

  Future<String> mainGetNewStoredPeers({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetNewStoredPeersConstMeta;

  Future<void> mainForgetPassword({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainForgetPasswordConstMeta;

  Future<bool> mainPeerHasPassword({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainPeerHasPasswordConstMeta;

  Future<bool> mainPeerExists({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainPeerExistsConstMeta;

  Future<void> mainLoadRecentPeers({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainLoadRecentPeersConstMeta;

  String mainLoadRecentPeersSync({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainLoadRecentPeersSyncConstMeta;

  String mainLoadLanPeersSync({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainLoadLanPeersSyncConstMeta;

  Future<String> mainLoadRecentPeersForAb(
      {required String filter, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainLoadRecentPeersForAbConstMeta;

  Future<void> mainLoadFavPeers({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainLoadFavPeersConstMeta;

  Future<void> mainLoadLanPeers({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainLoadLanPeersConstMeta;

  Future<void> mainRemoveDiscovered({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainRemoveDiscoveredConstMeta;

  Future<void> mainChangeTheme({required String dark, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainChangeThemeConstMeta;

  Future<void> mainChangeLanguage({required String lang, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainChangeLanguageConstMeta;

  String mainVideoSaveDirectory({required bool root, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainVideoSaveDirectoryConstMeta;

  Future<void> mainSetUserDefaultOption(
      {required String key, required String value, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetUserDefaultOptionConstMeta;

  String mainGetUserDefaultOption({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetUserDefaultOptionConstMeta;

  Future<String> mainHandleRelayId({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainHandleRelayIdConstMeta;

  bool mainIsOptionFixed({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainIsOptionFixedConstMeta;

  String mainGetMainDisplay({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetMainDisplayConstMeta;

  String mainGetDisplays({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetDisplaysConstMeta;

  Future<void> sessionAddPortForward(
      {required UuidValue sessionId,
      required int localPort,
      required String remoteHost,
      required int remotePort,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionAddPortForwardConstMeta;

  Future<void> sessionRemovePortForward(
      {required UuidValue sessionId, required int localPort, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionRemovePortForwardConstMeta;

  Future<void> sessionNewRdp({required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionNewRdpConstMeta;

  Future<void> sessionRequestVoiceCall(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionRequestVoiceCallConstMeta;

  Future<void> sessionCloseVoiceCall(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionCloseVoiceCallConstMeta;

  Future<void> cmHandleIncomingVoiceCall(
      {required int id, required bool accept, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmHandleIncomingVoiceCallConstMeta;

  Future<void> cmCloseVoiceCall({required int id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmCloseVoiceCallConstMeta;

  Future<void> setVoiceCallInputDevice(
      {required bool isCm, required String device, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetVoiceCallInputDeviceConstMeta;

  Future<String> getVoiceCallInputDevice({required bool isCm, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetVoiceCallInputDeviceConstMeta;

  Future<String> mainGetLastRemoteId({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetLastRemoteIdConstMeta;

  Future<String> mainGetSoftwareUpdateUrl({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetSoftwareUpdateUrlConstMeta;

  Future<String> mainGetHomeDir({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetHomeDirConstMeta;

  Future<String> mainGetLangs({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetLangsConstMeta;

  Future<String> mainGetTemporaryPassword({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetTemporaryPasswordConstMeta;

  Future<String> mainGetPermanentPassword({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetPermanentPasswordConstMeta;

  Future<String> mainGetFingerprint({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetFingerprintConstMeta;

  Future<String> cmGetClientsState({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmGetClientsStateConstMeta;

  Future<String?> cmCheckClientsLength({required int length, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmCheckClientsLengthConstMeta;

  Future<int> cmGetClientsLength({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmGetClientsLengthConstMeta;

  Future<void> mainInit(
      {required String appDir,
      required String customClientConfig,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainInitConstMeta;

  Future<void> mainDeviceId({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainDeviceIdConstMeta;

  Future<void> mainDeviceName({required String name, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainDeviceNameConstMeta;

  Future<void> mainRemovePeer({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainRemovePeerConstMeta;

  bool mainHasHwcodec({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainHasHwcodecConstMeta;

  bool mainHasVram({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainHasVramConstMeta;

  String mainSupportedHwdecodings({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSupportedHwdecodingsConstMeta;

  Future<bool> mainIsRoot({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainIsRootConstMeta;

  int getDoubleClickTime({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetDoubleClickTimeConstMeta;

  Future<void> mainStartDbusServer({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainStartDbusServerConstMeta;

  Future<void> mainSaveAb({required String json, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSaveAbConstMeta;

  Future<void> mainClearAb({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainClearAbConstMeta;

  Future<String> mainLoadAb({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainLoadAbConstMeta;

  Future<void> mainSaveGroup({required String json, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSaveGroupConstMeta;

  Future<void> mainClearGroup({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainClearGroupConstMeta;

  Future<String> mainLoadGroup({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainLoadGroupConstMeta;

  Future<void> sessionSendPointer(
      {required UuidValue sessionId, required String msg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSendPointerConstMeta;

  Future<void> sessionSendMouse(
      {required UuidValue sessionId, required String msg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSendMouseConstMeta;

  Future<void> sessionRestartRemoteDevice(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionRestartRemoteDeviceConstMeta;

  String sessionGetAuditServerSync(
      {required UuidValue sessionId, required String typ, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetAuditServerSyncConstMeta;

  Future<void> sessionSendNote(
      {required UuidValue sessionId, required String note, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionSendNoteConstMeta;

  Future<String> sessionAlternativeCodecs(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionAlternativeCodecsConstMeta;

  Future<void> sessionChangePreferCodec(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionChangePreferCodecConstMeta;

  Future<void> sessionOnWaitingForImageDialogShow(
      {required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSessionOnWaitingForImageDialogShowConstMeta;

  Future<void> sessionToggleVirtualDisplay(
      {required UuidValue sessionId,
      required int index,
      required bool on,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionToggleVirtualDisplayConstMeta;

  Future<void> mainSetHomeDir({required String home, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetHomeDirConstMeta;

  String mainGetDataDirIos({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetDataDirIosConstMeta;

  Future<void> mainStopService({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainStopServiceConstMeta;

  Future<void> mainStartService({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainStartServiceConstMeta;

  Future<void> mainUpdateTemporaryPassword({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainUpdateTemporaryPasswordConstMeta;

  Future<void> mainSetPermanentPassword(
      {required String password, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetPermanentPasswordConstMeta;

  Future<bool> mainCheckSuperUserPermission({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainCheckSuperUserPermissionConstMeta;

  String mainGetUnlockPin({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetUnlockPinConstMeta;

  String mainSetUnlockPin({required String pin, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetUnlockPinConstMeta;

  Future<void> mainCheckMouseTime({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainCheckMouseTimeConstMeta;

  Future<double> mainGetMouseTime({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetMouseTimeConstMeta;

  Future<void> mainWol({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainWolConstMeta;

  Future<void> mainCreateShortcut({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainCreateShortcutConstMeta;

  Future<void> cmSendChat(
      {required int connId, required String msg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmSendChatConstMeta;

  Future<void> cmLoginRes(
      {required int connId, required bool res, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmLoginResConstMeta;

  Future<void> cmCloseConnection({required int connId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmCloseConnectionConstMeta;

  Future<void> cmRemoveDisconnectedConnection(
      {required int connId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmRemoveDisconnectedConnectionConstMeta;

  Future<void> cmCheckClickTime({required int connId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmCheckClickTimeConstMeta;

  Future<double> cmGetClickTime({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmGetClickTimeConstMeta;

  Future<void> cmSwitchPermission(
      {required int connId,
      required String name,
      required bool enabled,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmSwitchPermissionConstMeta;

  bool cmCanElevate({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmCanElevateConstMeta;

  Future<void> cmElevatePortable({required int connId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmElevatePortableConstMeta;

  Future<void> cmSwitchBack({required int connId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmSwitchBackConstMeta;

  Future<String> cmGetConfig({required String name, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmGetConfigConstMeta;

  Future<String> mainGetBuildDate({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetBuildDateConstMeta;

  String translate(
      {required String name, required String locale, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTranslateConstMeta;

  int sessionGetRgbaSize(
      {required UuidValue sessionId, required int display, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionGetRgbaSizeConstMeta;

  void sessionNextRgba(
      {required UuidValue sessionId, required int display, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionNextRgbaConstMeta;

  void sessionRegisterPixelbufferTexture(
      {required UuidValue sessionId,
      required int display,
      required int ptr,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta
      get kSessionRegisterPixelbufferTextureConstMeta;

  void sessionRegisterGpuTexture(
      {required UuidValue sessionId,
      required int display,
      required int ptr,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionRegisterGpuTextureConstMeta;

  Future<void> queryOnlines({required List<String> ids, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kQueryOnlinesConstMeta;

  int versionToNumber({required String v, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVersionToNumberConstMeta;

  Future<bool> optionSynced({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOptionSyncedConstMeta;

  bool mainIsInstalled({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainIsInstalledConstMeta;

  void mainInitInputSource({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainInitInputSourceConstMeta;

  bool mainIsInstalledLowerVersion({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainIsInstalledLowerVersionConstMeta;

  bool mainIsInstalledDaemon({required bool prompt, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainIsInstalledDaemonConstMeta;

  bool mainIsProcessTrusted({required bool prompt, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainIsProcessTrustedConstMeta;

  bool mainIsCanScreenRecording({required bool prompt, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainIsCanScreenRecordingConstMeta;

  bool mainIsCanInputMonitoring({required bool prompt, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainIsCanInputMonitoringConstMeta;

  bool mainIsShareRdp({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainIsShareRdpConstMeta;

  Future<void> mainSetShareRdp({required bool enable, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSetShareRdpConstMeta;

  bool mainGotoInstall({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGotoInstallConstMeta;

  String mainGetNewVersion({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetNewVersionConstMeta;

  bool mainUpdateMe({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainUpdateMeConstMeta;

  Future<void> setCurSessionId({required UuidValue sessionId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetCurSessionIdConstMeta;

  bool installShowRunWithoutInstall({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInstallShowRunWithoutInstallConstMeta;

  Future<void> installRunWithoutInstall({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInstallRunWithoutInstallConstMeta;

  Future<void> installInstallMe(
      {required String options, required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInstallInstallMeConstMeta;

  String installInstallPath({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInstallInstallPathConstMeta;

  String installInstallOptions({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInstallInstallOptionsConstMeta;

  Future<void> mainAccountAuth(
      {required String op, required bool rememberMe, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainAccountAuthConstMeta;

  Future<void> mainAccountAuthCancel({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainAccountAuthCancelConstMeta;

  Future<String> mainAccountAuthResult({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainAccountAuthResultConstMeta;

  Future<void> mainOnMainWindowClose({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainOnMainWindowCloseConstMeta;

  bool mainCurrentIsWayland({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainCurrentIsWaylandConstMeta;

  bool mainIsLoginWayland({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainIsLoginWaylandConstMeta;

  bool mainHideDock({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainHideDockConstMeta;

  bool mainHasFileClipboard({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainHasFileClipboardConstMeta;

  bool mainHasGpuTextureRender({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainHasGpuTextureRenderConstMeta;

  Future<void> cmInit({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCmInitConstMeta;

  /// Start an ipc server for receiving the url scheme.
  ///
  /// * Should only be called in the main flutter window.
  /// * macOS only
  Future<void> mainStartIpcUrlServer({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainStartIpcUrlServerConstMeta;

  Future<void> mainTestWallpaper({required int second, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainTestWallpaperConstMeta;

  Future<bool> mainSupportRemoveWallpaper({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSupportRemoveWallpaperConstMeta;

  bool isIncomingOnly({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsIncomingOnlyConstMeta;

  bool isOutgoingOnly({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsOutgoingOnlyConstMeta;

  bool isCustomClient({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsCustomClientConstMeta;

  bool isDisableSettings({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsDisableSettingsConstMeta;

  bool isDisableAb({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsDisableAbConstMeta;

  bool isDisableAccount({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsDisableAccountConstMeta;

  bool isDisableGroupPanel({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsDisableGroupPanelConstMeta;

  bool isDisableInstallation({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsDisableInstallationConstMeta;

  Future<bool> isPresetPassword({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsPresetPasswordConstMeta;

  bool isPresetPasswordMobileOnly({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsPresetPasswordMobileOnlyConstMeta;

  /// Send a url scheme through the ipc.
  ///
  /// * macOS only
  Future<void> sendUrlScheme({required String url, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendUrlSchemeConstMeta;

  Future<void> pluginEvent(
      {required String id,
      required String peer,
      required Uint8List event,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginEventConstMeta;

  Stream<EventToUI> pluginRegisterEventStream(
      {required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginRegisterEventStreamConstMeta;

  String? pluginGetSessionOption(
      {required String id,
      required String peer,
      required String key,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginGetSessionOptionConstMeta;

  Future<void> pluginSetSessionOption(
      {required String id,
      required String peer,
      required String key,
      required String value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginSetSessionOptionConstMeta;

  String? pluginGetSharedOption(
      {required String id, required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginGetSharedOptionConstMeta;

  Future<void> pluginSetSharedOption(
      {required String id,
      required String key,
      required String value,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginSetSharedOptionConstMeta;

  Future<void> pluginReload({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginReloadConstMeta;

  void pluginEnable({required String id, required bool v, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginEnableConstMeta;

  bool pluginIsEnabled({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginIsEnabledConstMeta;

  bool pluginFeatureIsEnabled({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginFeatureIsEnabledConstMeta;

  Future<void> pluginSyncUi({required String syncTo, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginSyncUiConstMeta;

  Future<void> pluginListReload({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginListReloadConstMeta;

  Future<void> pluginInstall(
      {required String id, required bool b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPluginInstallConstMeta;

  bool isSupportMultiUiSession({required String version, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsSupportMultiUiSessionConstMeta;

  bool isSelinuxEnforcing({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsSelinuxEnforcingConstMeta;

  String mainDefaultPrivacyModeImpl({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainDefaultPrivacyModeImplConstMeta;

  String mainSupportedPrivacyModeImpls({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSupportedPrivacyModeImplsConstMeta;

  String mainSupportedInputSource({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainSupportedInputSourceConstMeta;

  Future<String> mainGenerate2Fa({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGenerate2FaConstMeta;

  Future<bool> mainVerify2Fa({required String code, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainVerify2FaConstMeta;

  bool mainHasValid2FaSync({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainHasValid2FaSyncConstMeta;

  Future<String> mainVerifyBot({required String token, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainVerifyBotConstMeta;

  bool mainHasValidBotSync({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainHasValidBotSyncConstMeta;

  String mainGetHardOption({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetHardOptionConstMeta;

  String mainGetBuildinOption({required String key, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetBuildinOptionConstMeta;

  Future<void> mainCheckHwcodec({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainCheckHwcodecConstMeta;

  Future<String> mainGetTrustedDevices({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainGetTrustedDevicesConstMeta;

  Future<void> mainRemoveTrustedDevices({required String json, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainRemoveTrustedDevicesConstMeta;

  Future<void> mainClearTrustedDevices({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainClearTrustedDevicesConstMeta;

  int mainMaxEncryptLen({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMainMaxEncryptLenConstMeta;

  Future<void> sessionRequestNewDisplayInitMsgs(
      {required UuidValue sessionId, required int display, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSessionRequestNewDisplayInitMsgsConstMeta;
}

@freezed
sealed class EventToUI with _$EventToUI {
  const factory EventToUI.event(
    String field0,
  ) = EventToUI_Event;
  const factory EventToUI.rgba(
    int field0,
  ) = EventToUI_Rgba;
  const factory EventToUI.texture(
    int field0,
    bool field1,
  ) = EventToUI_Texture;
}

class RustdeskImpl implements Rustdesk {
  final RustdeskPlatform _platform;
  factory RustdeskImpl(ExternalLibrary dylib) =>
      RustdeskImpl.raw(RustdeskPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory RustdeskImpl.wasm(FutureOr<WasmModule> module) =>
      RustdeskImpl(module as ExternalLibrary);
  RustdeskImpl.raw(this._platform);
  Stream<String> startGlobalEventStream(
      {required String appType, dynamic hint}) {
    var arg0 = _platform.api2wire_String(appType);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_start_global_event_stream(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kStartGlobalEventStreamConstMeta,
      argValues: [appType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartGlobalEventStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "start_global_event_stream",
        argNames: ["appType"],
      );

  Future<void> stopGlobalEventStream({required String appType, dynamic hint}) {
    var arg0 = _platform.api2wire_String(appType);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_stop_global_event_stream(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kStopGlobalEventStreamConstMeta,
      argValues: [appType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStopGlobalEventStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stop_global_event_stream",
        argNames: ["appType"],
      );

  Future<void> hostStopSystemKeyPropagate(
      {required bool stopped, dynamic hint}) {
    var arg0 = stopped;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_host_stop_system_key_propagate(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kHostStopSystemKeyPropagateConstMeta,
      argValues: [stopped],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHostStopSystemKeyPropagateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "host_stop_system_key_propagate",
        argNames: ["stopped"],
      );

  int peerGetDefaultSessionsCount({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_peer_get_default_sessions_count(arg0),
      parseSuccessData: _wire2api_usize,
      constMeta: kPeerGetDefaultSessionsCountConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPeerGetDefaultSessionsCountConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "peer_get_default_sessions_count",
        argNames: ["id"],
      );

  String sessionAddExistedSync(
      {required String id,
      required UuidValue sessionId,
      required Int32List displays,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_Uuid(sessionId);
    var arg2 = _platform.api2wire_int_32_list(displays);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_session_add_existed_sync(arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kSessionAddExistedSyncConstMeta,
      argValues: [id, sessionId, displays],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionAddExistedSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_add_existed_sync",
        argNames: ["id", "sessionId", "displays"],
      );

  String sessionAddSync(
      {required UuidValue sessionId,
      required String id,
      required bool isFileTransfer,
      required bool isPortForward,
      required bool isRdp,
      required String switchUuid,
      required bool forceRelay,
      required String password,
      required bool isSharedPassword,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(id);
    var arg2 = isFileTransfer;
    var arg3 = isPortForward;
    var arg4 = isRdp;
    var arg5 = _platform.api2wire_String(switchUuid);
    var arg6 = forceRelay;
    var arg7 = _platform.api2wire_String(password);
    var arg8 = isSharedPassword;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_session_add_sync(
          arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8),
      parseSuccessData: _wire2api_String,
      constMeta: kSessionAddSyncConstMeta,
      argValues: [
        sessionId,
        id,
        isFileTransfer,
        isPortForward,
        isRdp,
        switchUuid,
        forceRelay,
        password,
        isSharedPassword
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionAddSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_add_sync",
        argNames: [
          "sessionId",
          "id",
          "isFileTransfer",
          "isPortForward",
          "isRdp",
          "switchUuid",
          "forceRelay",
          "password",
          "isSharedPassword"
        ],
      );

  Stream<EventToUI> sessionStart(
      {required UuidValue sessionId, required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(id);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_session_start(port_, arg0, arg1),
      parseSuccessData: _wire2api_event_to_ui,
      constMeta: kSessionStartConstMeta,
      argValues: [sessionId, id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionStartConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_start",
        argNames: ["sessionId", "id"],
      );

  Stream<EventToUI> sessionStartWithDisplays(
      {required UuidValue sessionId,
      required String id,
      required Int32List displays,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(id);
    var arg2 = _platform.api2wire_int_32_list(displays);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_start_with_displays(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_event_to_ui,
      constMeta: kSessionStartWithDisplaysConstMeta,
      argValues: [sessionId, id, displays],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionStartWithDisplaysConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_start_with_displays",
        argNames: ["sessionId", "id", "displays"],
      );

  Future<bool?> sessionGetRemember(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_get_remember(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_bool,
      constMeta: kSessionGetRememberConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetRememberConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_remember",
        argNames: ["sessionId"],
      );

  Future<bool?> sessionGetToggleOption(
      {required UuidValue sessionId, required String arg, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(arg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_get_toggle_option(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_box_autoadd_bool,
      constMeta: kSessionGetToggleOptionConstMeta,
      argValues: [sessionId, arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetToggleOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_toggle_option",
        argNames: ["sessionId", "arg"],
      );

  bool sessionGetToggleOptionSync(
      {required UuidValue sessionId, required String arg, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(arg);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_session_get_toggle_option_sync(arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kSessionGetToggleOptionSyncConstMeta,
      argValues: [sessionId, arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetToggleOptionSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_toggle_option_sync",
        argNames: ["sessionId", "arg"],
      );

  Future<String?> sessionGetOption(
      {required UuidValue sessionId, required String arg, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(arg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_get_option(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kSessionGetOptionConstMeta,
      argValues: [sessionId, arg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_option",
        argNames: ["sessionId", "arg"],
      );

  Future<void> sessionLogin(
      {required UuidValue sessionId,
      required String osUsername,
      required String osPassword,
      required String password,
      required bool remember,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(osUsername);
    var arg2 = _platform.api2wire_String(osPassword);
    var arg3 = _platform.api2wire_String(password);
    var arg4 = remember;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_login(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionLoginConstMeta,
      argValues: [sessionId, osUsername, osPassword, password, remember],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionLoginConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_login",
        argNames: [
          "sessionId",
          "osUsername",
          "osPassword",
          "password",
          "remember"
        ],
      );

  Future<void> sessionSend2Fa(
      {required UuidValue sessionId,
      required String code,
      required bool trustThisDevice,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(code);
    var arg2 = trustThisDevice;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_send2fa(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSend2FaConstMeta,
      argValues: [sessionId, code, trustThisDevice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSend2FaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_send2fa",
        argNames: ["sessionId", "code", "trustThisDevice"],
      );

  bool sessionGetEnableTrustedDevices(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_session_get_enable_trusted_devices(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kSessionGetEnableTrustedDevicesConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetEnableTrustedDevicesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_enable_trusted_devices",
        argNames: ["sessionId"],
      );

  Future<void> sessionClose({required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_session_close(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionCloseConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_close",
        argNames: ["sessionId"],
      );

  Future<void> sessionRefresh(
      {required UuidValue sessionId, required int display, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_usize(display);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_refresh(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionRefreshConstMeta,
      argValues: [sessionId, display],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionRefreshConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_refresh",
        argNames: ["sessionId", "display"],
      );

  bool sessionIsMultiUiSession({required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_session_is_multi_ui_session(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kSessionIsMultiUiSessionConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionIsMultiUiSessionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_is_multi_ui_session",
        argNames: ["sessionId"],
      );

  Future<void> sessionRecordScreen(
      {required UuidValue sessionId,
      required bool start,
      required int display,
      required int width,
      required int height,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = start;
    var arg2 = api2wire_usize(display);
    var arg3 = api2wire_usize(width);
    var arg4 = api2wire_usize(height);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_record_screen(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionRecordScreenConstMeta,
      argValues: [sessionId, start, display, width, height],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionRecordScreenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_record_screen",
        argNames: ["sessionId", "start", "display", "width", "height"],
      );

  Future<void> sessionRecordStatus(
      {required UuidValue sessionId, required bool status, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = status;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_record_status(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionRecordStatusConstMeta,
      argValues: [sessionId, status],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionRecordStatusConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_record_status",
        argNames: ["sessionId", "status"],
      );

  Future<void> sessionReconnect(
      {required UuidValue sessionId, required bool forceRelay, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = forceRelay;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_reconnect(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionReconnectConstMeta,
      argValues: [sessionId, forceRelay],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionReconnectConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_reconnect",
        argNames: ["sessionId", "forceRelay"],
      );

  Future<void> sessionToggleOption(
      {required UuidValue sessionId, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_toggle_option(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionToggleOptionConstMeta,
      argValues: [sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionToggleOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_toggle_option",
        argNames: ["sessionId", "value"],
      );

  Future<void> sessionTogglePrivacyMode(
      {required UuidValue sessionId,
      required String implKey,
      required bool on,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(implKey);
    var arg2 = on;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_toggle_privacy_mode(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionTogglePrivacyModeConstMeta,
      argValues: [sessionId, implKey, on],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionTogglePrivacyModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_toggle_privacy_mode",
        argNames: ["sessionId", "implKey", "on"],
      );

  Future<String?> sessionGetFlutterOption(
      {required UuidValue sessionId, required String k, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(k);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_get_flutter_option(port_, arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kSessionGetFlutterOptionConstMeta,
      argValues: [sessionId, k],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetFlutterOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_flutter_option",
        argNames: ["sessionId", "k"],
      );

  Future<void> sessionSetFlutterOption(
      {required UuidValue sessionId,
      required String k,
      required String v,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(k);
    var arg2 = _platform.api2wire_String(v);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_set_flutter_option(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSetFlutterOptionConstMeta,
      argValues: [sessionId, k, v],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSetFlutterOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_set_flutter_option",
        argNames: ["sessionId", "k", "v"],
      );

  int getNextTextureKey({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get_next_texture_key(),
      parseSuccessData: _wire2api_i32,
      constMeta: kGetNextTextureKeyConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetNextTextureKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_next_texture_key",
        argNames: [],
      );

  String getLocalFlutterOption({required String k, dynamic hint}) {
    var arg0 = _platform.api2wire_String(k);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get_local_flutter_option(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGetLocalFlutterOptionConstMeta,
      argValues: [k],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetLocalFlutterOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_local_flutter_option",
        argNames: ["k"],
      );

  Future<void> setLocalFlutterOption(
      {required String k, required String v, dynamic hint}) {
    var arg0 = _platform.api2wire_String(k);
    var arg1 = _platform.api2wire_String(v);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_set_local_flutter_option(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetLocalFlutterOptionConstMeta,
      argValues: [k, v],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetLocalFlutterOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_local_flutter_option",
        argNames: ["k", "v"],
      );

  String getLocalKbLayoutType({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get_local_kb_layout_type(),
      parseSuccessData: _wire2api_String,
      constMeta: kGetLocalKbLayoutTypeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetLocalKbLayoutTypeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_local_kb_layout_type",
        argNames: [],
      );

  Future<void> setLocalKbLayoutType(
      {required String kbLayoutType, dynamic hint}) {
    var arg0 = _platform.api2wire_String(kbLayoutType);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_set_local_kb_layout_type(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetLocalKbLayoutTypeConstMeta,
      argValues: [kbLayoutType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetLocalKbLayoutTypeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_local_kb_layout_type",
        argNames: ["kbLayoutType"],
      );

  Future<String?> sessionGetViewStyle(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_get_view_style(port_, arg0),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kSessionGetViewStyleConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetViewStyleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_view_style",
        argNames: ["sessionId"],
      );

  Future<void> sessionSetViewStyle(
      {required UuidValue sessionId, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_set_view_style(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSetViewStyleConstMeta,
      argValues: [sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSetViewStyleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_set_view_style",
        argNames: ["sessionId", "value"],
      );

  Future<String?> sessionGetScrollStyle(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_get_scroll_style(port_, arg0),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kSessionGetScrollStyleConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetScrollStyleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_scroll_style",
        argNames: ["sessionId"],
      );

  Future<void> sessionSetScrollStyle(
      {required UuidValue sessionId, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_set_scroll_style(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSetScrollStyleConstMeta,
      argValues: [sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSetScrollStyleConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_set_scroll_style",
        argNames: ["sessionId", "value"],
      );

  Future<String?> sessionGetImageQuality(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_get_image_quality(port_, arg0),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kSessionGetImageQualityConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetImageQualityConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_image_quality",
        argNames: ["sessionId"],
      );

  Future<void> sessionSetImageQuality(
      {required UuidValue sessionId, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_set_image_quality(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSetImageQualityConstMeta,
      argValues: [sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSetImageQualityConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_set_image_quality",
        argNames: ["sessionId", "value"],
      );

  Future<String?> sessionGetKeyboardMode(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_get_keyboard_mode(port_, arg0),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kSessionGetKeyboardModeConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetKeyboardModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_keyboard_mode",
        argNames: ["sessionId"],
      );

  Future<void> sessionSetKeyboardMode(
      {required UuidValue sessionId, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_set_keyboard_mode(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSetKeyboardModeConstMeta,
      argValues: [sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSetKeyboardModeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_set_keyboard_mode",
        argNames: ["sessionId", "value"],
      );

  String? sessionGetReverseMouseWheelSync(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_session_get_reverse_mouse_wheel_sync(arg0),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kSessionGetReverseMouseWheelSyncConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSessionGetReverseMouseWheelSyncConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "session_get_reverse_mouse_wheel_sync",
            argNames: ["sessionId"],
          );

  Future<void> sessionSetReverseMouseWheel(
      {required UuidValue sessionId, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_set_reverse_mouse_wheel(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSetReverseMouseWheelConstMeta,
      argValues: [sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSetReverseMouseWheelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_set_reverse_mouse_wheel",
        argNames: ["sessionId", "value"],
      );

  String? sessionGetDisplaysAsIndividualWindows(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_session_get_displays_as_individual_windows(arg0),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kSessionGetDisplaysAsIndividualWindowsConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSessionGetDisplaysAsIndividualWindowsConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "session_get_displays_as_individual_windows",
            argNames: ["sessionId"],
          );

  Future<void> sessionSetDisplaysAsIndividualWindows(
      {required UuidValue sessionId, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_set_displays_as_individual_windows(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSetDisplaysAsIndividualWindowsConstMeta,
      argValues: [sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSessionSetDisplaysAsIndividualWindowsConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "session_set_displays_as_individual_windows",
            argNames: ["sessionId", "value"],
          );

  String? sessionGetUseAllMyDisplaysForTheRemoteSession(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_session_get_use_all_my_displays_for_the_remote_session(arg0),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kSessionGetUseAllMyDisplaysForTheRemoteSessionConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSessionGetUseAllMyDisplaysForTheRemoteSessionConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "session_get_use_all_my_displays_for_the_remote_session",
            argNames: ["sessionId"],
          );

  Future<void> sessionSetUseAllMyDisplaysForTheRemoteSession(
      {required UuidValue sessionId, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_set_use_all_my_displays_for_the_remote_session(
              port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSetUseAllMyDisplaysForTheRemoteSessionConstMeta,
      argValues: [sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSessionSetUseAllMyDisplaysForTheRemoteSessionConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "session_set_use_all_my_displays_for_the_remote_session",
            argNames: ["sessionId", "value"],
          );

  Future<Int32List?> sessionGetCustomImageQuality(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_get_custom_image_quality(port_, arg0),
      parseSuccessData: _wire2api_opt_int_32_list,
      constMeta: kSessionGetCustomImageQualityConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetCustomImageQualityConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_custom_image_quality",
        argNames: ["sessionId"],
      );

  bool sessionIsKeyboardModeSupported(
      {required UuidValue sessionId, required String mode, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(mode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_session_is_keyboard_mode_supported(arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kSessionIsKeyboardModeSupportedConstMeta,
      argValues: [sessionId, mode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionIsKeyboardModeSupportedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_is_keyboard_mode_supported",
        argNames: ["sessionId", "mode"],
      );

  Future<void> sessionSetCustomImageQuality(
      {required UuidValue sessionId, required int value, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_set_custom_image_quality(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSetCustomImageQualityConstMeta,
      argValues: [sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSetCustomImageQualityConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_set_custom_image_quality",
        argNames: ["sessionId", "value"],
      );

  Future<void> sessionSetCustomFps(
      {required UuidValue sessionId, required int fps, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(fps);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_set_custom_fps(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSetCustomFpsConstMeta,
      argValues: [sessionId, fps],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSetCustomFpsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_set_custom_fps",
        argNames: ["sessionId", "fps"],
      );

  Future<void> sessionLockScreen({required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_session_lock_screen(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionLockScreenConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionLockScreenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_lock_screen",
        argNames: ["sessionId"],
      );

  Future<void> sessionCtrlAltDel({required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_ctrl_alt_del(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionCtrlAltDelConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionCtrlAltDelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_ctrl_alt_del",
        argNames: ["sessionId"],
      );

  Future<void> sessionSwitchDisplay(
      {required bool isDesktop,
      required UuidValue sessionId,
      required Int32List value,
      dynamic hint}) {
    var arg0 = isDesktop;
    var arg1 = _platform.api2wire_Uuid(sessionId);
    var arg2 = _platform.api2wire_int_32_list(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_switch_display(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSwitchDisplayConstMeta,
      argValues: [isDesktop, sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSwitchDisplayConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_switch_display",
        argNames: ["isDesktop", "sessionId", "value"],
      );

  Future<void> sessionHandleFlutterKeyEvent(
      {required UuidValue sessionId,
      required String character,
      required int usbHid,
      required int lockModes,
      required bool downOrUp,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(character);
    var arg2 = api2wire_i32(usbHid);
    var arg3 = api2wire_i32(lockModes);
    var arg4 = downOrUp;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_session_handle_flutter_key_event(
          port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionHandleFlutterKeyEventConstMeta,
      argValues: [sessionId, character, usbHid, lockModes, downOrUp],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionHandleFlutterKeyEventConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_handle_flutter_key_event",
        argNames: ["sessionId", "character", "usbHid", "lockModes", "downOrUp"],
      );

  Future<void> sessionHandleFlutterRawKeyEvent(
      {required UuidValue sessionId,
      required String name,
      required int platformCode,
      required int positionCode,
      required int lockModes,
      required bool downOrUp,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = api2wire_i32(platformCode);
    var arg3 = api2wire_i32(positionCode);
    var arg4 = api2wire_i32(lockModes);
    var arg5 = downOrUp;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_handle_flutter_raw_key_event(
              port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionHandleFlutterRawKeyEventConstMeta,
      argValues: [
        sessionId,
        name,
        platformCode,
        positionCode,
        lockModes,
        downOrUp
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSessionHandleFlutterRawKeyEventConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "session_handle_flutter_raw_key_event",
            argNames: [
              "sessionId",
              "name",
              "platformCode",
              "positionCode",
              "lockModes",
              "downOrUp"
            ],
          );

  void sessionEnterOrLeave(
      {required UuidValue sessionId, required bool enter, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = enter;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_session_enter_or_leave(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionEnterOrLeaveConstMeta,
      argValues: [sessionId, enter],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionEnterOrLeaveConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_enter_or_leave",
        argNames: ["sessionId", "enter"],
      );

  Future<void> sessionInputKey(
      {required UuidValue sessionId,
      required String name,
      required bool down,
      required bool press,
      required bool alt,
      required bool ctrl,
      required bool shift,
      required bool command,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = down;
    var arg3 = press;
    var arg4 = alt;
    var arg5 = ctrl;
    var arg6 = shift;
    var arg7 = command;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_session_input_key(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionInputKeyConstMeta,
      argValues: [sessionId, name, down, press, alt, ctrl, shift, command],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionInputKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_input_key",
        argNames: [
          "sessionId",
          "name",
          "down",
          "press",
          "alt",
          "ctrl",
          "shift",
          "command"
        ],
      );

  Future<void> sessionInputString(
      {required UuidValue sessionId, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_input_string(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionInputStringConstMeta,
      argValues: [sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionInputStringConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_input_string",
        argNames: ["sessionId", "value"],
      );

  Future<void> sessionSendChat(
      {required UuidValue sessionId, required String text, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(text);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_send_chat(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSendChatConstMeta,
      argValues: [sessionId, text],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSendChatConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_send_chat",
        argNames: ["sessionId", "text"],
      );

  Future<void> sessionPeerOption(
      {required UuidValue sessionId,
      required String name,
      required String value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_peer_option(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionPeerOptionConstMeta,
      argValues: [sessionId, name, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionPeerOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_peer_option",
        argNames: ["sessionId", "name", "value"],
      );

  Future<String> sessionGetPeerOption(
      {required UuidValue sessionId, required String name, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_get_peer_option(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSessionGetPeerOptionConstMeta,
      argValues: [sessionId, name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetPeerOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_peer_option",
        argNames: ["sessionId", "name"],
      );

  Future<void> sessionInputOsPassword(
      {required UuidValue sessionId, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_input_os_password(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionInputOsPasswordConstMeta,
      argValues: [sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionInputOsPasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_input_os_password",
        argNames: ["sessionId", "value"],
      );

  Future<void> sessionReadRemoteDir(
      {required UuidValue sessionId,
      required String path,
      required bool includeHidden,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(path);
    var arg2 = includeHidden;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_read_remote_dir(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionReadRemoteDirConstMeta,
      argValues: [sessionId, path, includeHidden],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionReadRemoteDirConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_read_remote_dir",
        argNames: ["sessionId", "path", "includeHidden"],
      );

  Future<void> sessionSendFiles(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required String to,
      required int fileNum,
      required bool includeHidden,
      required bool isRemote,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(actId);
    var arg2 = _platform.api2wire_String(path);
    var arg3 = _platform.api2wire_String(to);
    var arg4 = api2wire_i32(fileNum);
    var arg5 = includeHidden;
    var arg6 = isRemote;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_session_send_files(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSendFilesConstMeta,
      argValues: [sessionId, actId, path, to, fileNum, includeHidden, isRemote],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSendFilesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_send_files",
        argNames: [
          "sessionId",
          "actId",
          "path",
          "to",
          "fileNum",
          "includeHidden",
          "isRemote"
        ],
      );

  Future<void> sessionSetConfirmOverrideFile(
      {required UuidValue sessionId,
      required int actId,
      required int fileNum,
      required bool needOverride,
      required bool remember,
      required bool isUpload,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(actId);
    var arg2 = api2wire_i32(fileNum);
    var arg3 = needOverride;
    var arg4 = remember;
    var arg5 = isUpload;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_set_confirm_override_file(
              port_, arg0, arg1, arg2, arg3, arg4, arg5),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSetConfirmOverrideFileConstMeta,
      argValues: [sessionId, actId, fileNum, needOverride, remember, isUpload],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSetConfirmOverrideFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_set_confirm_override_file",
        argNames: [
          "sessionId",
          "actId",
          "fileNum",
          "needOverride",
          "remember",
          "isUpload"
        ],
      );

  Future<void> sessionRemoveFile(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required int fileNum,
      required bool isRemote,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(actId);
    var arg2 = _platform.api2wire_String(path);
    var arg3 = api2wire_i32(fileNum);
    var arg4 = isRemote;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_remove_file(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionRemoveFileConstMeta,
      argValues: [sessionId, actId, path, fileNum, isRemote],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionRemoveFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_remove_file",
        argNames: ["sessionId", "actId", "path", "fileNum", "isRemote"],
      );

  Future<void> sessionReadDirRecursive(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required bool isRemote,
      required bool showHidden,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(actId);
    var arg2 = _platform.api2wire_String(path);
    var arg3 = isRemote;
    var arg4 = showHidden;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_read_dir_recursive(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionReadDirRecursiveConstMeta,
      argValues: [sessionId, actId, path, isRemote, showHidden],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionReadDirRecursiveConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_read_dir_recursive",
        argNames: ["sessionId", "actId", "path", "isRemote", "showHidden"],
      );

  Future<void> sessionRemoveAllEmptyDirs(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required bool isRemote,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(actId);
    var arg2 = _platform.api2wire_String(path);
    var arg3 = isRemote;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_remove_all_empty_dirs(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionRemoveAllEmptyDirsConstMeta,
      argValues: [sessionId, actId, path, isRemote],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionRemoveAllEmptyDirsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_remove_all_empty_dirs",
        argNames: ["sessionId", "actId", "path", "isRemote"],
      );

  Future<void> sessionCancelJob(
      {required UuidValue sessionId, required int actId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(actId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_cancel_job(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionCancelJobConstMeta,
      argValues: [sessionId, actId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionCancelJobConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_cancel_job",
        argNames: ["sessionId", "actId"],
      );

  Future<void> sessionCreateDir(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required bool isRemote,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(actId);
    var arg2 = _platform.api2wire_String(path);
    var arg3 = isRemote;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_create_dir(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionCreateDirConstMeta,
      argValues: [sessionId, actId, path, isRemote],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionCreateDirConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_create_dir",
        argNames: ["sessionId", "actId", "path", "isRemote"],
      );

  Future<String> sessionReadLocalDirSync(
      {required UuidValue sessionId,
      required String path,
      required bool showHidden,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(path);
    var arg2 = showHidden;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_read_local_dir_sync(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kSessionReadLocalDirSyncConstMeta,
      argValues: [sessionId, path, showHidden],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionReadLocalDirSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_read_local_dir_sync",
        argNames: ["sessionId", "path", "showHidden"],
      );

  Future<String> sessionGetPlatform(
      {required UuidValue sessionId, required bool isRemote, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = isRemote;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_get_platform(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSessionGetPlatformConstMeta,
      argValues: [sessionId, isRemote],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetPlatformConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_platform",
        argNames: ["sessionId", "isRemote"],
      );

  Future<void> sessionLoadLastTransferJobs(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_load_last_transfer_jobs(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionLoadLastTransferJobsConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionLoadLastTransferJobsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_load_last_transfer_jobs",
        argNames: ["sessionId"],
      );

  Future<void> sessionAddJob(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required String to,
      required int fileNum,
      required bool includeHidden,
      required bool isRemote,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(actId);
    var arg2 = _platform.api2wire_String(path);
    var arg3 = _platform.api2wire_String(to);
    var arg4 = api2wire_i32(fileNum);
    var arg5 = includeHidden;
    var arg6 = isRemote;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_session_add_job(
          port_, arg0, arg1, arg2, arg3, arg4, arg5, arg6),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionAddJobConstMeta,
      argValues: [sessionId, actId, path, to, fileNum, includeHidden, isRemote],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionAddJobConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_add_job",
        argNames: [
          "sessionId",
          "actId",
          "path",
          "to",
          "fileNum",
          "includeHidden",
          "isRemote"
        ],
      );

  Future<void> sessionResumeJob(
      {required UuidValue sessionId,
      required int actId,
      required bool isRemote,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(actId);
    var arg2 = isRemote;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_resume_job(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionResumeJobConstMeta,
      argValues: [sessionId, actId, isRemote],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionResumeJobConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_resume_job",
        argNames: ["sessionId", "actId", "isRemote"],
      );

  Future<void> sessionRenameFile(
      {required UuidValue sessionId,
      required int actId,
      required String path,
      required String newName,
      required bool isRemote,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(actId);
    var arg2 = _platform.api2wire_String(path);
    var arg3 = _platform.api2wire_String(newName);
    var arg4 = isRemote;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_rename_file(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionRenameFileConstMeta,
      argValues: [sessionId, actId, path, newName, isRemote],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionRenameFileConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_rename_file",
        argNames: ["sessionId", "actId", "path", "newName", "isRemote"],
      );

  Future<void> sessionElevateDirect(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_elevate_direct(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionElevateDirectConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionElevateDirectConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_elevate_direct",
        argNames: ["sessionId"],
      );

  Future<void> sessionElevateWithLogon(
      {required UuidValue sessionId,
      required String username,
      required String password,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(username);
    var arg2 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_elevate_with_logon(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionElevateWithLogonConstMeta,
      argValues: [sessionId, username, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionElevateWithLogonConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_elevate_with_logon",
        argNames: ["sessionId", "username", "password"],
      );

  Future<void> sessionSwitchSides(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_switch_sides(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSwitchSidesConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSwitchSidesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_switch_sides",
        argNames: ["sessionId"],
      );

  Future<void> sessionChangeResolution(
      {required UuidValue sessionId,
      required int display,
      required int width,
      required int height,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(display);
    var arg2 = api2wire_i32(width);
    var arg3 = api2wire_i32(height);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_change_resolution(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionChangeResolutionConstMeta,
      argValues: [sessionId, display, width, height],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionChangeResolutionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_change_resolution",
        argNames: ["sessionId", "display", "width", "height"],
      );

  Future<void> sessionSetSize(
      {required UuidValue sessionId,
      required int display,
      required int width,
      required int height,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_usize(display);
    var arg2 = api2wire_usize(width);
    var arg3 = api2wire_usize(height);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_set_size(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSetSizeConstMeta,
      argValues: [sessionId, display, width, height],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSetSizeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_set_size",
        argNames: ["sessionId", "display", "width", "height"],
      );

  Future<void> sessionSendSelectedSessionId(
      {required UuidValue sessionId, required String sid, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(sid);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_send_selected_session_id(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSendSelectedSessionIdConstMeta,
      argValues: [sessionId, sid],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSendSelectedSessionIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_send_selected_session_id",
        argNames: ["sessionId", "sid"],
      );

  Future<List<String>> mainGetSoundInputs({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_sound_inputs(port_),
      parseSuccessData: _wire2api_StringList,
      constMeta: kMainGetSoundInputsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetSoundInputsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_sound_inputs",
        argNames: [],
      );

  Future<String?> mainGetDefaultSoundInput({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_get_default_sound_input(port_),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kMainGetDefaultSoundInputConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetDefaultSoundInputConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_default_sound_input",
        argNames: [],
      );

  String mainGetLoginDeviceInfo({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_login_device_info(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetLoginDeviceInfoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetLoginDeviceInfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_login_device_info",
        argNames: [],
      );

  Future<void> mainChangeId({required String newId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(newId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_change_id(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainChangeIdConstMeta,
      argValues: [newId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainChangeIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_change_id",
        argNames: ["newId"],
      );

  Future<String> mainGetAsyncStatus({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_async_status(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetAsyncStatusConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetAsyncStatusConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_async_status",
        argNames: [],
      );

  Future<String?> mainGetHttpStatus({required String url, dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_get_http_status(port_, arg0),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kMainGetHttpStatusConstMeta,
      argValues: [url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetHttpStatusConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_http_status",
        argNames: ["url"],
      );

  Future<String> mainGetOption({required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_option(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetOptionConstMeta,
      argValues: [key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_option",
        argNames: ["key"],
      );

  String mainGetOptionSync({required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_option_sync(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetOptionSyncConstMeta,
      argValues: [key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetOptionSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_option_sync",
        argNames: ["key"],
      );

  Future<String> mainGetError({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_error(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetErrorConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetErrorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_error",
        argNames: [],
      );

  bool mainShowOption({required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_show_option(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainShowOptionConstMeta,
      argValues: [key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainShowOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_show_option",
        argNames: ["key"],
      );

  Future<void> mainSetOption(
      {required String key, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_set_option(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSetOptionConstMeta,
      argValues: [key, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_option",
        argNames: ["key", "value"],
      );

  Future<String> mainGetOptions({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_options(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetOptionsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetOptionsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_options",
        argNames: [],
      );

  String mainGetOptionsSync({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_options_sync(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetOptionsSyncConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetOptionsSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_options_sync",
        argNames: [],
      );

  Future<void> mainSetOptions({required String json, dynamic hint}) {
    var arg0 = _platform.api2wire_String(json);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_set_options(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSetOptionsConstMeta,
      argValues: [json],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetOptionsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_options",
        argNames: ["json"],
      );

  Future<String> mainTestIfValidServer(
      {required String server, required bool testWithProxy, dynamic hint}) {
    var arg0 = _platform.api2wire_String(server);
    var arg1 = testWithProxy;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_test_if_valid_server(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kMainTestIfValidServerConstMeta,
      argValues: [server, testWithProxy],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainTestIfValidServerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_test_if_valid_server",
        argNames: ["server", "testWithProxy"],
      );

  Future<void> mainSetSocks(
      {required String proxy,
      required String username,
      required String password,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(proxy);
    var arg1 = _platform.api2wire_String(username);
    var arg2 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_set_socks(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSetSocksConstMeta,
      argValues: [proxy, username, password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetSocksConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_socks",
        argNames: ["proxy", "username", "password"],
      );

  Future<bool> mainGetProxyStatus({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_proxy_status(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainGetProxyStatusConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetProxyStatusConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_proxy_status",
        argNames: [],
      );

  Future<List<String>> mainGetSocks({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_socks(port_),
      parseSuccessData: _wire2api_StringList,
      constMeta: kMainGetSocksConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetSocksConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_socks",
        argNames: [],
      );

  Future<String> mainGetAppName({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_app_name(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetAppNameConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetAppNameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_app_name",
        argNames: [],
      );

  String mainGetAppNameSync({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_app_name_sync(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetAppNameSyncConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetAppNameSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_app_name_sync",
        argNames: [],
      );

  String mainUriPrefixSync({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_uri_prefix_sync(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainUriPrefixSyncConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainUriPrefixSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_uri_prefix_sync",
        argNames: [],
      );

  Future<String> mainGetLicense({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_license(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetLicenseConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetLicenseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_license",
        argNames: [],
      );

  Future<String> mainGetVersion({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_version(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetVersionConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetVersionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_version",
        argNames: [],
      );

  Future<List<String>> mainGetFav({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_fav(port_),
      parseSuccessData: _wire2api_StringList,
      constMeta: kMainGetFavConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetFavConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_fav",
        argNames: [],
      );

  Future<void> mainStoreFav({required List<String> favs, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(favs);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_store_fav(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainStoreFavConstMeta,
      argValues: [favs],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainStoreFavConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_store_fav",
        argNames: ["favs"],
      );

  String mainGetPeerSync({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_peer_sync(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetPeerSyncConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetPeerSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_peer_sync",
        argNames: ["id"],
      );

  Future<String> mainGetLanPeers({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_lan_peers(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetLanPeersConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetLanPeersConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_lan_peers",
        argNames: [],
      );

  Future<String> mainGetConnectStatus({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_connect_status(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetConnectStatusConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetConnectStatusConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_connect_status",
        argNames: [],
      );

  Future<void> mainCheckConnectStatus({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_check_connect_status(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainCheckConnectStatusConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainCheckConnectStatusConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_check_connect_status",
        argNames: [],
      );

  Future<bool> mainIsUsingPublicServer({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_is_using_public_server(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainIsUsingPublicServerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainIsUsingPublicServerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_is_using_public_server",
        argNames: [],
      );

  Future<void> mainDiscover({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_discover(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainDiscoverConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainDiscoverConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_discover",
        argNames: [],
      );

  Future<String> mainGetApiServer({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_api_server(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetApiServerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetApiServerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_api_server",
        argNames: [],
      );

  Future<void> mainHttpRequest(
      {required String url,
      required String method,
      String? body,
      required String header,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    var arg1 = _platform.api2wire_String(method);
    var arg2 = _platform.api2wire_opt_String(body);
    var arg3 = _platform.api2wire_String(header);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_http_request(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainHttpRequestConstMeta,
      argValues: [url, method, body, header],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainHttpRequestConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_http_request",
        argNames: ["url", "method", "body", "header"],
      );

  String mainGetLocalOption({required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_local_option(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetLocalOptionConstMeta,
      argValues: [key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetLocalOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_local_option",
        argNames: ["key"],
      );

  bool mainGetUseTextureRender({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_use_texture_render(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainGetUseTextureRenderConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetUseTextureRenderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_use_texture_render",
        argNames: [],
      );

  String mainGetEnv({required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_env(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetEnvConstMeta,
      argValues: [key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetEnvConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_env",
        argNames: ["key"],
      );

  Future<void> mainSetLocalOption(
      {required String key, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_set_local_option(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSetLocalOptionConstMeta,
      argValues: [key, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetLocalOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_local_option",
        argNames: ["key", "value"],
      );

  Future<String> mainHandleWaylandScreencastRestoreToken(
      {required String key, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_main_handle_wayland_screencast_restore_token(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kMainHandleWaylandScreencastRestoreTokenConstMeta,
      argValues: [key, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kMainHandleWaylandScreencastRestoreTokenConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "main_handle_wayland_screencast_restore_token",
            argNames: ["key", "value"],
          );

  String mainGetInputSource({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_input_source(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetInputSourceConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetInputSourceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_input_source",
        argNames: [],
      );

  Future<void> mainSetInputSource(
      {required UuidValue sessionId, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_set_input_source(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSetInputSourceConstMeta,
      argValues: [sessionId, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetInputSourceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_input_source",
        argNames: ["sessionId", "value"],
      );

  Future<String> mainGetMyId({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_my_id(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetMyIdConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetMyIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_my_id",
        argNames: [],
      );

  Future<String> mainGetUuid({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_uuid(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetUuidConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetUuidConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_uuid",
        argNames: [],
      );

  Future<String> mainGetPeerOption(
      {required String id, required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(key);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_get_peer_option(port_, arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetPeerOptionConstMeta,
      argValues: [id, key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetPeerOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_peer_option",
        argNames: ["id", "key"],
      );

  String mainGetPeerOptionSync(
      {required String id, required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_peer_option_sync(arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetPeerOptionSyncConstMeta,
      argValues: [id, key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetPeerOptionSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_peer_option_sync",
        argNames: ["id", "key"],
      );

  String mainGetPeerFlutterOptionSync(
      {required String id, required String k, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(k);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_main_get_peer_flutter_option_sync(arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetPeerFlutterOptionSyncConstMeta,
      argValues: [id, k],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetPeerFlutterOptionSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_peer_flutter_option_sync",
        argNames: ["id", "k"],
      );

  void mainSetPeerFlutterOptionSync(
      {required String id,
      required String k,
      required String v,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(k);
    var arg2 = _platform.api2wire_String(v);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_main_set_peer_flutter_option_sync(arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSetPeerFlutterOptionSyncConstMeta,
      argValues: [id, k, v],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetPeerFlutterOptionSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_peer_flutter_option_sync",
        argNames: ["id", "k", "v"],
      );

  Future<void> mainSetPeerOption(
      {required String id,
      required String key,
      required String value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(key);
    var arg2 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_set_peer_option(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSetPeerOptionConstMeta,
      argValues: [id, key, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetPeerOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_peer_option",
        argNames: ["id", "key", "value"],
      );

  bool mainSetPeerOptionSync(
      {required String id,
      required String key,
      required String value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(key);
    var arg2 = _platform.api2wire_String(value);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_main_set_peer_option_sync(arg0, arg1, arg2),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainSetPeerOptionSyncConstMeta,
      argValues: [id, key, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetPeerOptionSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_peer_option_sync",
        argNames: ["id", "key", "value"],
      );

  Future<void> mainSetPeerAlias(
      {required String id, required String alias, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(alias);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_set_peer_alias(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSetPeerAliasConstMeta,
      argValues: [id, alias],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetPeerAliasConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_peer_alias",
        argNames: ["id", "alias"],
      );

  Future<String> mainGetNewStoredPeers({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_new_stored_peers(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetNewStoredPeersConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetNewStoredPeersConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_new_stored_peers",
        argNames: [],
      );

  Future<void> mainForgetPassword({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_forget_password(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainForgetPasswordConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainForgetPasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_forget_password",
        argNames: ["id"],
      );

  Future<bool> mainPeerHasPassword({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_peer_has_password(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainPeerHasPasswordConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainPeerHasPasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_peer_has_password",
        argNames: ["id"],
      );

  Future<bool> mainPeerExists({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_peer_exists(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainPeerExistsConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainPeerExistsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_peer_exists",
        argNames: ["id"],
      );

  Future<void> mainLoadRecentPeers({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_load_recent_peers(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainLoadRecentPeersConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainLoadRecentPeersConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_load_recent_peers",
        argNames: [],
      );

  String mainLoadRecentPeersSync({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_load_recent_peers_sync(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainLoadRecentPeersSyncConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainLoadRecentPeersSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_load_recent_peers_sync",
        argNames: [],
      );

  String mainLoadLanPeersSync({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_load_lan_peers_sync(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainLoadLanPeersSyncConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainLoadLanPeersSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_load_lan_peers_sync",
        argNames: [],
      );

  Future<String> mainLoadRecentPeersForAb(
      {required String filter, dynamic hint}) {
    var arg0 = _platform.api2wire_String(filter);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_load_recent_peers_for_ab(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainLoadRecentPeersForAbConstMeta,
      argValues: [filter],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainLoadRecentPeersForAbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_load_recent_peers_for_ab",
        argNames: ["filter"],
      );

  Future<void> mainLoadFavPeers({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_load_fav_peers(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainLoadFavPeersConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainLoadFavPeersConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_load_fav_peers",
        argNames: [],
      );

  Future<void> mainLoadLanPeers({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_load_lan_peers(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainLoadLanPeersConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainLoadLanPeersConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_load_lan_peers",
        argNames: [],
      );

  Future<void> mainRemoveDiscovered({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_remove_discovered(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainRemoveDiscoveredConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainRemoveDiscoveredConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_remove_discovered",
        argNames: ["id"],
      );

  Future<void> mainChangeTheme({required String dark, dynamic hint}) {
    var arg0 = _platform.api2wire_String(dark);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_change_theme(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainChangeThemeConstMeta,
      argValues: [dark],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainChangeThemeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_change_theme",
        argNames: ["dark"],
      );

  Future<void> mainChangeLanguage({required String lang, dynamic hint}) {
    var arg0 = _platform.api2wire_String(lang);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_change_language(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainChangeLanguageConstMeta,
      argValues: [lang],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainChangeLanguageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_change_language",
        argNames: ["lang"],
      );

  String mainVideoSaveDirectory({required bool root, dynamic hint}) {
    var arg0 = root;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_video_save_directory(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainVideoSaveDirectoryConstMeta,
      argValues: [root],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainVideoSaveDirectoryConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_video_save_directory",
        argNames: ["root"],
      );

  Future<void> mainSetUserDefaultOption(
      {required String key, required String value, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    var arg1 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_set_user_default_option(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSetUserDefaultOptionConstMeta,
      argValues: [key, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetUserDefaultOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_user_default_option",
        argNames: ["key", "value"],
      );

  String mainGetUserDefaultOption({required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_user_default_option(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetUserDefaultOptionConstMeta,
      argValues: [key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetUserDefaultOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_user_default_option",
        argNames: ["key"],
      );

  Future<String> mainHandleRelayId({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_handle_relay_id(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainHandleRelayIdConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainHandleRelayIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_handle_relay_id",
        argNames: ["id"],
      );

  bool mainIsOptionFixed({required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_is_option_fixed(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainIsOptionFixedConstMeta,
      argValues: [key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainIsOptionFixedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_is_option_fixed",
        argNames: ["key"],
      );

  String mainGetMainDisplay({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_main_display(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetMainDisplayConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetMainDisplayConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_main_display",
        argNames: [],
      );

  String mainGetDisplays({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_displays(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetDisplaysConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetDisplaysConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_displays",
        argNames: [],
      );

  Future<void> sessionAddPortForward(
      {required UuidValue sessionId,
      required int localPort,
      required String remoteHost,
      required int remotePort,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(localPort);
    var arg2 = _platform.api2wire_String(remoteHost);
    var arg3 = api2wire_i32(remotePort);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_add_port_forward(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionAddPortForwardConstMeta,
      argValues: [sessionId, localPort, remoteHost, remotePort],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionAddPortForwardConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_add_port_forward",
        argNames: ["sessionId", "localPort", "remoteHost", "remotePort"],
      );

  Future<void> sessionRemovePortForward(
      {required UuidValue sessionId, required int localPort, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(localPort);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_remove_port_forward(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionRemovePortForwardConstMeta,
      argValues: [sessionId, localPort],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionRemovePortForwardConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_remove_port_forward",
        argNames: ["sessionId", "localPort"],
      );

  Future<void> sessionNewRdp({required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_session_new_rdp(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionNewRdpConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionNewRdpConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_new_rdp",
        argNames: ["sessionId"],
      );

  Future<void> sessionRequestVoiceCall(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_request_voice_call(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionRequestVoiceCallConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionRequestVoiceCallConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_request_voice_call",
        argNames: ["sessionId"],
      );

  Future<void> sessionCloseVoiceCall(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_close_voice_call(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionCloseVoiceCallConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionCloseVoiceCallConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_close_voice_call",
        argNames: ["sessionId"],
      );

  Future<void> cmHandleIncomingVoiceCall(
      {required int id, required bool accept, dynamic hint}) {
    var arg0 = api2wire_i32(id);
    var arg1 = accept;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_cm_handle_incoming_voice_call(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kCmHandleIncomingVoiceCallConstMeta,
      argValues: [id, accept],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmHandleIncomingVoiceCallConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_handle_incoming_voice_call",
        argNames: ["id", "accept"],
      );

  Future<void> cmCloseVoiceCall({required int id, dynamic hint}) {
    var arg0 = api2wire_i32(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cm_close_voice_call(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kCmCloseVoiceCallConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmCloseVoiceCallConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_close_voice_call",
        argNames: ["id"],
      );

  Future<void> setVoiceCallInputDevice(
      {required bool isCm, required String device, dynamic hint}) {
    var arg0 = isCm;
    var arg1 = _platform.api2wire_String(device);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_set_voice_call_input_device(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetVoiceCallInputDeviceConstMeta,
      argValues: [isCm, device],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetVoiceCallInputDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_voice_call_input_device",
        argNames: ["isCm", "device"],
      );

  Future<String> getVoiceCallInputDevice({required bool isCm, dynamic hint}) {
    var arg0 = isCm;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_voice_call_input_device(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGetVoiceCallInputDeviceConstMeta,
      argValues: [isCm],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetVoiceCallInputDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_voice_call_input_device",
        argNames: ["isCm"],
      );

  Future<String> mainGetLastRemoteId({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_last_remote_id(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetLastRemoteIdConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetLastRemoteIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_last_remote_id",
        argNames: [],
      );

  Future<String> mainGetSoftwareUpdateUrl({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_get_software_update_url(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetSoftwareUpdateUrlConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetSoftwareUpdateUrlConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_software_update_url",
        argNames: [],
      );

  Future<String> mainGetHomeDir({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_home_dir(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetHomeDirConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetHomeDirConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_home_dir",
        argNames: [],
      );

  Future<String> mainGetLangs({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_langs(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetLangsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetLangsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_langs",
        argNames: [],
      );

  Future<String> mainGetTemporaryPassword({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_get_temporary_password(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetTemporaryPasswordConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetTemporaryPasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_temporary_password",
        argNames: [],
      );

  Future<String> mainGetPermanentPassword({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_get_permanent_password(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetPermanentPasswordConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetPermanentPasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_permanent_password",
        argNames: [],
      );

  Future<String> mainGetFingerprint({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_fingerprint(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetFingerprintConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetFingerprintConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_fingerprint",
        argNames: [],
      );

  Future<String> cmGetClientsState({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cm_get_clients_state(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kCmGetClientsStateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmGetClientsStateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_get_clients_state",
        argNames: [],
      );

  Future<String?> cmCheckClientsLength({required int length, dynamic hint}) {
    var arg0 = api2wire_usize(length);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_cm_check_clients_length(port_, arg0),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kCmCheckClientsLengthConstMeta,
      argValues: [length],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmCheckClientsLengthConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_check_clients_length",
        argNames: ["length"],
      );

  Future<int> cmGetClientsLength({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cm_get_clients_length(port_),
      parseSuccessData: _wire2api_usize,
      constMeta: kCmGetClientsLengthConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmGetClientsLengthConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_get_clients_length",
        argNames: [],
      );

  Future<void> mainInit(
      {required String appDir,
      required String customClientConfig,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(appDir);
    var arg1 = _platform.api2wire_String(customClientConfig);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_init(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainInitConstMeta,
      argValues: [appDir, customClientConfig],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_init",
        argNames: ["appDir", "customClientConfig"],
      );

  Future<void> mainDeviceId({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_device_id(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainDeviceIdConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainDeviceIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_device_id",
        argNames: ["id"],
      );

  Future<void> mainDeviceName({required String name, dynamic hint}) {
    var arg0 = _platform.api2wire_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_device_name(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainDeviceNameConstMeta,
      argValues: [name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainDeviceNameConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_device_name",
        argNames: ["name"],
      );

  Future<void> mainRemovePeer({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_remove_peer(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainRemovePeerConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainRemovePeerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_remove_peer",
        argNames: ["id"],
      );

  bool mainHasHwcodec({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_has_hwcodec(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainHasHwcodecConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainHasHwcodecConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_has_hwcodec",
        argNames: [],
      );

  bool mainHasVram({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_has_vram(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainHasVramConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainHasVramConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_has_vram",
        argNames: [],
      );

  String mainSupportedHwdecodings({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_supported_hwdecodings(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainSupportedHwdecodingsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSupportedHwdecodingsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_supported_hwdecodings",
        argNames: [],
      );

  Future<bool> mainIsRoot({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_is_root(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainIsRootConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainIsRootConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_is_root",
        argNames: [],
      );

  int getDoubleClickTime({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get_double_click_time(),
      parseSuccessData: _wire2api_i32,
      constMeta: kGetDoubleClickTimeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDoubleClickTimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_double_click_time",
        argNames: [],
      );

  Future<void> mainStartDbusServer({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_start_dbus_server(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainStartDbusServerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainStartDbusServerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_start_dbus_server",
        argNames: [],
      );

  Future<void> mainSaveAb({required String json, dynamic hint}) {
    var arg0 = _platform.api2wire_String(json);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_save_ab(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSaveAbConstMeta,
      argValues: [json],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSaveAbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_save_ab",
        argNames: ["json"],
      );

  Future<void> mainClearAb({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_clear_ab(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainClearAbConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainClearAbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_clear_ab",
        argNames: [],
      );

  Future<String> mainLoadAb({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_load_ab(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainLoadAbConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainLoadAbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_load_ab",
        argNames: [],
      );

  Future<void> mainSaveGroup({required String json, dynamic hint}) {
    var arg0 = _platform.api2wire_String(json);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_save_group(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSaveGroupConstMeta,
      argValues: [json],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSaveGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_save_group",
        argNames: ["json"],
      );

  Future<void> mainClearGroup({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_clear_group(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainClearGroupConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainClearGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_clear_group",
        argNames: [],
      );

  Future<String> mainLoadGroup({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_load_group(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainLoadGroupConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainLoadGroupConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_load_group",
        argNames: [],
      );

  Future<void> sessionSendPointer(
      {required UuidValue sessionId, required String msg, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(msg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_send_pointer(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSendPointerConstMeta,
      argValues: [sessionId, msg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSendPointerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_send_pointer",
        argNames: ["sessionId", "msg"],
      );

  Future<void> sessionSendMouse(
      {required UuidValue sessionId, required String msg, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(msg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_send_mouse(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSendMouseConstMeta,
      argValues: [sessionId, msg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSendMouseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_send_mouse",
        argNames: ["sessionId", "msg"],
      );

  Future<void> sessionRestartRemoteDevice(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_restart_remote_device(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionRestartRemoteDeviceConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionRestartRemoteDeviceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_restart_remote_device",
        argNames: ["sessionId"],
      );

  String sessionGetAuditServerSync(
      {required UuidValue sessionId, required String typ, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(typ);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_session_get_audit_server_sync(arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kSessionGetAuditServerSyncConstMeta,
      argValues: [sessionId, typ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetAuditServerSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_audit_server_sync",
        argNames: ["sessionId", "typ"],
      );

  Future<void> sessionSendNote(
      {required UuidValue sessionId, required String note, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = _platform.api2wire_String(note);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_send_note(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionSendNoteConstMeta,
      argValues: [sessionId, note],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionSendNoteConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_send_note",
        argNames: ["sessionId", "note"],
      );

  Future<String> sessionAlternativeCodecs(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_alternative_codecs(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kSessionAlternativeCodecsConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionAlternativeCodecsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_alternative_codecs",
        argNames: ["sessionId"],
      );

  Future<void> sessionChangePreferCodec(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_session_change_prefer_codec(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionChangePreferCodecConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionChangePreferCodecConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_change_prefer_codec",
        argNames: ["sessionId"],
      );

  Future<void> sessionOnWaitingForImageDialogShow(
      {required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_on_waiting_for_image_dialog_show(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionOnWaitingForImageDialogShowConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSessionOnWaitingForImageDialogShowConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "session_on_waiting_for_image_dialog_show",
            argNames: ["sessionId"],
          );

  Future<void> sessionToggleVirtualDisplay(
      {required UuidValue sessionId,
      required int index,
      required bool on,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_i32(index);
    var arg2 = on;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_toggle_virtual_display(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionToggleVirtualDisplayConstMeta,
      argValues: [sessionId, index, on],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionToggleVirtualDisplayConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_toggle_virtual_display",
        argNames: ["sessionId", "index", "on"],
      );

  Future<void> mainSetHomeDir({required String home, dynamic hint}) {
    var arg0 = _platform.api2wire_String(home);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_set_home_dir(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSetHomeDirConstMeta,
      argValues: [home],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetHomeDirConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_home_dir",
        argNames: ["home"],
      );

  String mainGetDataDirIos({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_data_dir_ios(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetDataDirIosConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetDataDirIosConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_data_dir_ios",
        argNames: [],
      );

  Future<void> mainStopService({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_stop_service(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainStopServiceConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainStopServiceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_stop_service",
        argNames: [],
      );

  Future<void> mainStartService({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_start_service(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainStartServiceConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainStartServiceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_start_service",
        argNames: [],
      );

  Future<void> mainUpdateTemporaryPassword({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_update_temporary_password(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainUpdateTemporaryPasswordConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainUpdateTemporaryPasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_update_temporary_password",
        argNames: [],
      );

  Future<void> mainSetPermanentPassword(
      {required String password, dynamic hint}) {
    var arg0 = _platform.api2wire_String(password);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_set_permanent_password(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSetPermanentPasswordConstMeta,
      argValues: [password],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetPermanentPasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_permanent_password",
        argNames: ["password"],
      );

  Future<bool> mainCheckSuperUserPermission({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_check_super_user_permission(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainCheckSuperUserPermissionConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainCheckSuperUserPermissionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_check_super_user_permission",
        argNames: [],
      );

  String mainGetUnlockPin({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_unlock_pin(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetUnlockPinConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetUnlockPinConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_unlock_pin",
        argNames: [],
      );

  String mainSetUnlockPin({required String pin, dynamic hint}) {
    var arg0 = _platform.api2wire_String(pin);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_set_unlock_pin(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainSetUnlockPinConstMeta,
      argValues: [pin],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetUnlockPinConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_unlock_pin",
        argNames: ["pin"],
      );

  Future<void> mainCheckMouseTime({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_check_mouse_time(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainCheckMouseTimeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainCheckMouseTimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_check_mouse_time",
        argNames: [],
      );

  Future<double> mainGetMouseTime({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_mouse_time(port_),
      parseSuccessData: _wire2api_f64,
      constMeta: kMainGetMouseTimeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetMouseTimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_mouse_time",
        argNames: [],
      );

  Future<void> mainWol({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_wol(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainWolConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainWolConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_wol",
        argNames: ["id"],
      );

  Future<void> mainCreateShortcut({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_create_shortcut(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainCreateShortcutConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainCreateShortcutConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_create_shortcut",
        argNames: ["id"],
      );

  Future<void> cmSendChat(
      {required int connId, required String msg, dynamic hint}) {
    var arg0 = api2wire_i32(connId);
    var arg1 = _platform.api2wire_String(msg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cm_send_chat(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kCmSendChatConstMeta,
      argValues: [connId, msg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmSendChatConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_send_chat",
        argNames: ["connId", "msg"],
      );

  Future<void> cmLoginRes(
      {required int connId, required bool res, dynamic hint}) {
    var arg0 = api2wire_i32(connId);
    var arg1 = res;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cm_login_res(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kCmLoginResConstMeta,
      argValues: [connId, res],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmLoginResConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_login_res",
        argNames: ["connId", "res"],
      );

  Future<void> cmCloseConnection({required int connId, dynamic hint}) {
    var arg0 = api2wire_i32(connId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cm_close_connection(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kCmCloseConnectionConstMeta,
      argValues: [connId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmCloseConnectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_close_connection",
        argNames: ["connId"],
      );

  Future<void> cmRemoveDisconnectedConnection(
      {required int connId, dynamic hint}) {
    var arg0 = api2wire_i32(connId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_cm_remove_disconnected_connection(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kCmRemoveDisconnectedConnectionConstMeta,
      argValues: [connId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmRemoveDisconnectedConnectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_remove_disconnected_connection",
        argNames: ["connId"],
      );

  Future<void> cmCheckClickTime({required int connId, dynamic hint}) {
    var arg0 = api2wire_i32(connId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cm_check_click_time(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kCmCheckClickTimeConstMeta,
      argValues: [connId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmCheckClickTimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_check_click_time",
        argNames: ["connId"],
      );

  Future<double> cmGetClickTime({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cm_get_click_time(port_),
      parseSuccessData: _wire2api_f64,
      constMeta: kCmGetClickTimeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmGetClickTimeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_get_click_time",
        argNames: [],
      );

  Future<void> cmSwitchPermission(
      {required int connId,
      required String name,
      required bool enabled,
      dynamic hint}) {
    var arg0 = api2wire_i32(connId);
    var arg1 = _platform.api2wire_String(name);
    var arg2 = enabled;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_cm_switch_permission(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kCmSwitchPermissionConstMeta,
      argValues: [connId, name, enabled],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmSwitchPermissionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_switch_permission",
        argNames: ["connId", "name", "enabled"],
      );

  bool cmCanElevate({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_cm_can_elevate(),
      parseSuccessData: _wire2api_bool,
      constMeta: kCmCanElevateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmCanElevateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_can_elevate",
        argNames: [],
      );

  Future<void> cmElevatePortable({required int connId, dynamic hint}) {
    var arg0 = api2wire_i32(connId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cm_elevate_portable(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kCmElevatePortableConstMeta,
      argValues: [connId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmElevatePortableConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_elevate_portable",
        argNames: ["connId"],
      );

  Future<void> cmSwitchBack({required int connId, dynamic hint}) {
    var arg0 = api2wire_i32(connId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cm_switch_back(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kCmSwitchBackConstMeta,
      argValues: [connId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmSwitchBackConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_switch_back",
        argNames: ["connId"],
      );

  Future<String> cmGetConfig({required String name, dynamic hint}) {
    var arg0 = _platform.api2wire_String(name);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cm_get_config(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kCmGetConfigConstMeta,
      argValues: [name],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmGetConfigConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_get_config",
        argNames: ["name"],
      );

  Future<String> mainGetBuildDate({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_build_date(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetBuildDateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetBuildDateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_build_date",
        argNames: [],
      );

  String translate(
      {required String name, required String locale, dynamic hint}) {
    var arg0 = _platform.api2wire_String(name);
    var arg1 = _platform.api2wire_String(locale);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_translate(arg0, arg1),
      parseSuccessData: _wire2api_String,
      constMeta: kTranslateConstMeta,
      argValues: [name, locale],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTranslateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "translate",
        argNames: ["name", "locale"],
      );

  int sessionGetRgbaSize(
      {required UuidValue sessionId, required int display, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_usize(display);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_session_get_rgba_size(arg0, arg1),
      parseSuccessData: _wire2api_usize,
      constMeta: kSessionGetRgbaSizeConstMeta,
      argValues: [sessionId, display],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionGetRgbaSizeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_get_rgba_size",
        argNames: ["sessionId", "display"],
      );

  void sessionNextRgba(
      {required UuidValue sessionId, required int display, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_usize(display);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_session_next_rgba(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionNextRgbaConstMeta,
      argValues: [sessionId, display],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionNextRgbaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_next_rgba",
        argNames: ["sessionId", "display"],
      );

  void sessionRegisterPixelbufferTexture(
      {required UuidValue sessionId,
      required int display,
      required int ptr,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_usize(display);
    var arg2 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner
          .wire_session_register_pixelbuffer_texture(arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionRegisterPixelbufferTextureConstMeta,
      argValues: [sessionId, display, ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSessionRegisterPixelbufferTextureConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "session_register_pixelbuffer_texture",
            argNames: ["sessionId", "display", "ptr"],
          );

  void sessionRegisterGpuTexture(
      {required UuidValue sessionId,
      required int display,
      required int ptr,
      dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_usize(display);
    var arg2 = api2wire_usize(ptr);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_session_register_gpu_texture(arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionRegisterGpuTextureConstMeta,
      argValues: [sessionId, display, ptr],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSessionRegisterGpuTextureConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "session_register_gpu_texture",
        argNames: ["sessionId", "display", "ptr"],
      );

  Future<void> queryOnlines({required List<String> ids, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(ids);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_query_onlines(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kQueryOnlinesConstMeta,
      argValues: [ids],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kQueryOnlinesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "query_onlines",
        argNames: ["ids"],
      );

  int versionToNumber({required String v, dynamic hint}) {
    var arg0 = _platform.api2wire_String(v);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_version_to_number(arg0),
      parseSuccessData: _wire2api_i64,
      constMeta: kVersionToNumberConstMeta,
      argValues: [v],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kVersionToNumberConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "version_to_number",
        argNames: ["v"],
      );

  Future<bool> optionSynced({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_option_synced(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kOptionSyncedConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOptionSyncedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "option_synced",
        argNames: [],
      );

  bool mainIsInstalled({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_is_installed(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainIsInstalledConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainIsInstalledConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_is_installed",
        argNames: [],
      );

  void mainInitInputSource({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_init_input_source(),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainInitInputSourceConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainInitInputSourceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_init_input_source",
        argNames: [],
      );

  bool mainIsInstalledLowerVersion({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_is_installed_lower_version(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainIsInstalledLowerVersionConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainIsInstalledLowerVersionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_is_installed_lower_version",
        argNames: [],
      );

  bool mainIsInstalledDaemon({required bool prompt, dynamic hint}) {
    var arg0 = prompt;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_is_installed_daemon(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainIsInstalledDaemonConstMeta,
      argValues: [prompt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainIsInstalledDaemonConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_is_installed_daemon",
        argNames: ["prompt"],
      );

  bool mainIsProcessTrusted({required bool prompt, dynamic hint}) {
    var arg0 = prompt;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_is_process_trusted(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainIsProcessTrustedConstMeta,
      argValues: [prompt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainIsProcessTrustedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_is_process_trusted",
        argNames: ["prompt"],
      );

  bool mainIsCanScreenRecording({required bool prompt, dynamic hint}) {
    var arg0 = prompt;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_is_can_screen_recording(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainIsCanScreenRecordingConstMeta,
      argValues: [prompt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainIsCanScreenRecordingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_is_can_screen_recording",
        argNames: ["prompt"],
      );

  bool mainIsCanInputMonitoring({required bool prompt, dynamic hint}) {
    var arg0 = prompt;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_is_can_input_monitoring(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainIsCanInputMonitoringConstMeta,
      argValues: [prompt],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainIsCanInputMonitoringConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_is_can_input_monitoring",
        argNames: ["prompt"],
      );

  bool mainIsShareRdp({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_is_share_rdp(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainIsShareRdpConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainIsShareRdpConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_is_share_rdp",
        argNames: [],
      );

  Future<void> mainSetShareRdp({required bool enable, dynamic hint}) {
    var arg0 = enable;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_set_share_rdp(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainSetShareRdpConstMeta,
      argValues: [enable],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSetShareRdpConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_set_share_rdp",
        argNames: ["enable"],
      );

  bool mainGotoInstall({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_goto_install(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainGotoInstallConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGotoInstallConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_goto_install",
        argNames: [],
      );

  String mainGetNewVersion({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_new_version(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetNewVersionConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetNewVersionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_new_version",
        argNames: [],
      );

  bool mainUpdateMe({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_update_me(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainUpdateMeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainUpdateMeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_update_me",
        argNames: [],
      );

  Future<void> setCurSessionId({required UuidValue sessionId, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_cur_session_id(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSetCurSessionIdConstMeta,
      argValues: [sessionId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetCurSessionIdConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_cur_session_id",
        argNames: ["sessionId"],
      );

  bool installShowRunWithoutInstall({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_install_show_run_without_install(),
      parseSuccessData: _wire2api_bool,
      constMeta: kInstallShowRunWithoutInstallConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInstallShowRunWithoutInstallConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "install_show_run_without_install",
        argNames: [],
      );

  Future<void> installRunWithoutInstall({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_install_run_without_install(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kInstallRunWithoutInstallConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInstallRunWithoutInstallConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "install_run_without_install",
        argNames: [],
      );

  Future<void> installInstallMe(
      {required String options, required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(options);
    var arg1 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_install_install_me(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kInstallInstallMeConstMeta,
      argValues: [options, path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInstallInstallMeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "install_install_me",
        argNames: ["options", "path"],
      );

  String installInstallPath({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_install_install_path(),
      parseSuccessData: _wire2api_String,
      constMeta: kInstallInstallPathConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInstallInstallPathConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "install_install_path",
        argNames: [],
      );

  String installInstallOptions({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_install_install_options(),
      parseSuccessData: _wire2api_String,
      constMeta: kInstallInstallOptionsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInstallInstallOptionsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "install_install_options",
        argNames: [],
      );

  Future<void> mainAccountAuth(
      {required String op, required bool rememberMe, dynamic hint}) {
    var arg0 = _platform.api2wire_String(op);
    var arg1 = rememberMe;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_account_auth(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainAccountAuthConstMeta,
      argValues: [op, rememberMe],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainAccountAuthConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_account_auth",
        argNames: ["op", "rememberMe"],
      );

  Future<void> mainAccountAuthCancel({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_account_auth_cancel(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainAccountAuthCancelConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainAccountAuthCancelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_account_auth_cancel",
        argNames: [],
      );

  Future<String> mainAccountAuthResult({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_account_auth_result(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainAccountAuthResultConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainAccountAuthResultConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_account_auth_result",
        argNames: [],
      );

  Future<void> mainOnMainWindowClose({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_on_main_window_close(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainOnMainWindowCloseConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainOnMainWindowCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_on_main_window_close",
        argNames: [],
      );

  bool mainCurrentIsWayland({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_current_is_wayland(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainCurrentIsWaylandConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainCurrentIsWaylandConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_current_is_wayland",
        argNames: [],
      );

  bool mainIsLoginWayland({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_is_login_wayland(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainIsLoginWaylandConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainIsLoginWaylandConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_is_login_wayland",
        argNames: [],
      );

  bool mainHideDock({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_hide_dock(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainHideDockConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainHideDockConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_hide_dock",
        argNames: [],
      );

  bool mainHasFileClipboard({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_has_file_clipboard(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainHasFileClipboardConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainHasFileClipboardConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_has_file_clipboard",
        argNames: [],
      );

  bool mainHasGpuTextureRender({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_has_gpu_texture_render(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainHasGpuTextureRenderConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainHasGpuTextureRenderConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_has_gpu_texture_render",
        argNames: [],
      );

  Future<void> cmInit({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cm_init(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kCmInitConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCmInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "cm_init",
        argNames: [],
      );

  Future<void> mainStartIpcUrlServer({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_start_ipc_url_server(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainStartIpcUrlServerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainStartIpcUrlServerConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_start_ipc_url_server",
        argNames: [],
      );

  Future<void> mainTestWallpaper({required int second, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(second);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_test_wallpaper(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainTestWallpaperConstMeta,
      argValues: [second],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainTestWallpaperConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_test_wallpaper",
        argNames: ["second"],
      );

  Future<bool> mainSupportRemoveWallpaper({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_support_remove_wallpaper(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainSupportRemoveWallpaperConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSupportRemoveWallpaperConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_support_remove_wallpaper",
        argNames: [],
      );

  bool isIncomingOnly({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_incoming_only(),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsIncomingOnlyConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsIncomingOnlyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_incoming_only",
        argNames: [],
      );

  bool isOutgoingOnly({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_outgoing_only(),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsOutgoingOnlyConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsOutgoingOnlyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_outgoing_only",
        argNames: [],
      );

  bool isCustomClient({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_custom_client(),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsCustomClientConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsCustomClientConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_custom_client",
        argNames: [],
      );

  bool isDisableSettings({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_disable_settings(),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsDisableSettingsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsDisableSettingsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_disable_settings",
        argNames: [],
      );

  bool isDisableAb({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_disable_ab(),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsDisableAbConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsDisableAbConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_disable_ab",
        argNames: [],
      );

  bool isDisableAccount({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_disable_account(),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsDisableAccountConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsDisableAccountConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_disable_account",
        argNames: [],
      );

  bool isDisableGroupPanel({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_disable_group_panel(),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsDisableGroupPanelConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsDisableGroupPanelConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_disable_group_panel",
        argNames: [],
      );

  bool isDisableInstallation({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_disable_installation(),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsDisableInstallationConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsDisableInstallationConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_disable_installation",
        argNames: [],
      );

  Future<bool> isPresetPassword({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_preset_password(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsPresetPasswordConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsPresetPasswordConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_preset_password",
        argNames: [],
      );

  bool isPresetPasswordMobileOnly({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_preset_password_mobile_only(),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsPresetPasswordMobileOnlyConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsPresetPasswordMobileOnlyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_preset_password_mobile_only",
        argNames: [],
      );

  Future<void> sendUrlScheme({required String url, dynamic hint}) {
    var arg0 = _platform.api2wire_String(url);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_url_scheme(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kSendUrlSchemeConstMeta,
      argValues: [url],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendUrlSchemeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_url_scheme",
        argNames: ["url"],
      );

  Future<void> pluginEvent(
      {required String id,
      required String peer,
      required Uint8List event,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(peer);
    var arg2 = _platform.api2wire_uint_8_list(event);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_plugin_event(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kPluginEventConstMeta,
      argValues: [id, peer, event],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginEventConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_event",
        argNames: ["id", "peer", "event"],
      );

  Stream<EventToUI> pluginRegisterEventStream(
      {required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_plugin_register_event_stream(port_, arg0),
      parseSuccessData: _wire2api_event_to_ui,
      constMeta: kPluginRegisterEventStreamConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginRegisterEventStreamConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_register_event_stream",
        argNames: ["id"],
      );

  String? pluginGetSessionOption(
      {required String id,
      required String peer,
      required String key,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(peer);
    var arg2 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_plugin_get_session_option(arg0, arg1, arg2),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kPluginGetSessionOptionConstMeta,
      argValues: [id, peer, key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginGetSessionOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_get_session_option",
        argNames: ["id", "peer", "key"],
      );

  Future<void> pluginSetSessionOption(
      {required String id,
      required String peer,
      required String key,
      required String value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(peer);
    var arg2 = _platform.api2wire_String(key);
    var arg3 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_plugin_set_session_option(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kPluginSetSessionOptionConstMeta,
      argValues: [id, peer, key, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginSetSessionOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_set_session_option",
        argNames: ["id", "peer", "key", "value"],
      );

  String? pluginGetSharedOption(
      {required String id, required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_plugin_get_shared_option(arg0, arg1),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kPluginGetSharedOptionConstMeta,
      argValues: [id, key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginGetSharedOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_get_shared_option",
        argNames: ["id", "key"],
      );

  Future<void> pluginSetSharedOption(
      {required String id,
      required String key,
      required String value,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = _platform.api2wire_String(key);
    var arg2 = _platform.api2wire_String(value);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_plugin_set_shared_option(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kPluginSetSharedOptionConstMeta,
      argValues: [id, key, value],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginSetSharedOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_set_shared_option",
        argNames: ["id", "key", "value"],
      );

  Future<void> pluginReload({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_plugin_reload(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kPluginReloadConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginReloadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_reload",
        argNames: ["id"],
      );

  void pluginEnable({required String id, required bool v, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = v;
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_plugin_enable(arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kPluginEnableConstMeta,
      argValues: [id, v],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginEnableConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_enable",
        argNames: ["id", "v"],
      );

  bool pluginIsEnabled({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_plugin_is_enabled(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kPluginIsEnabledConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginIsEnabledConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_is_enabled",
        argNames: ["id"],
      );

  bool pluginFeatureIsEnabled({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_plugin_feature_is_enabled(),
      parseSuccessData: _wire2api_bool,
      constMeta: kPluginFeatureIsEnabledConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginFeatureIsEnabledConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_feature_is_enabled",
        argNames: [],
      );

  Future<void> pluginSyncUi({required String syncTo, dynamic hint}) {
    var arg0 = _platform.api2wire_String(syncTo);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_plugin_sync_ui(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kPluginSyncUiConstMeta,
      argValues: [syncTo],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginSyncUiConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_sync_ui",
        argNames: ["syncTo"],
      );

  Future<void> pluginListReload({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_plugin_list_reload(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kPluginListReloadConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginListReloadConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_list_reload",
        argNames: [],
      );

  Future<void> pluginInstall(
      {required String id, required bool b, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    var arg1 = b;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_plugin_install(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kPluginInstallConstMeta,
      argValues: [id, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPluginInstallConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "plugin_install",
        argNames: ["id", "b"],
      );

  bool isSupportMultiUiSession({required String version, dynamic hint}) {
    var arg0 = _platform.api2wire_String(version);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_support_multi_ui_session(arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsSupportMultiUiSessionConstMeta,
      argValues: [version],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsSupportMultiUiSessionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_support_multi_ui_session",
        argNames: ["version"],
      );

  bool isSelinuxEnforcing({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_selinux_enforcing(),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsSelinuxEnforcingConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsSelinuxEnforcingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_selinux_enforcing",
        argNames: [],
      );

  String mainDefaultPrivacyModeImpl({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_default_privacy_mode_impl(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainDefaultPrivacyModeImplConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainDefaultPrivacyModeImplConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_default_privacy_mode_impl",
        argNames: [],
      );

  String mainSupportedPrivacyModeImpls({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_supported_privacy_mode_impls(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainSupportedPrivacyModeImplsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSupportedPrivacyModeImplsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_supported_privacy_mode_impls",
        argNames: [],
      );

  String mainSupportedInputSource({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_supported_input_source(),
      parseSuccessData: _wire2api_String,
      constMeta: kMainSupportedInputSourceConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainSupportedInputSourceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_supported_input_source",
        argNames: [],
      );

  Future<String> mainGenerate2Fa({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_generate2fa(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGenerate2FaConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGenerate2FaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_generate2fa",
        argNames: [],
      );

  Future<bool> mainVerify2Fa({required String code, dynamic hint}) {
    var arg0 = _platform.api2wire_String(code);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_verify2fa(port_, arg0),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainVerify2FaConstMeta,
      argValues: [code],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainVerify2FaConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_verify2fa",
        argNames: ["code"],
      );

  bool mainHasValid2FaSync({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_has_valid_2fa_sync(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainHasValid2FaSyncConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainHasValid2FaSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_has_valid_2fa_sync",
        argNames: [],
      );

  Future<String> mainVerifyBot({required String token, dynamic hint}) {
    var arg0 = _platform.api2wire_String(token);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_verify_bot(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainVerifyBotConstMeta,
      argValues: [token],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainVerifyBotConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_verify_bot",
        argNames: ["token"],
      );

  bool mainHasValidBotSync({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_has_valid_bot_sync(),
      parseSuccessData: _wire2api_bool,
      constMeta: kMainHasValidBotSyncConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainHasValidBotSyncConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_has_valid_bot_sync",
        argNames: [],
      );

  String mainGetHardOption({required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_hard_option(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetHardOptionConstMeta,
      argValues: [key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetHardOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_hard_option",
        argNames: ["key"],
      );

  String mainGetBuildinOption({required String key, dynamic hint}) {
    var arg0 = _platform.api2wire_String(key);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_get_buildin_option(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetBuildinOptionConstMeta,
      argValues: [key],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetBuildinOptionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_buildin_option",
        argNames: ["key"],
      );

  Future<void> mainCheckHwcodec({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_check_hwcodec(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainCheckHwcodecConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainCheckHwcodecConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_check_hwcodec",
        argNames: [],
      );

  Future<String> mainGetTrustedDevices({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_main_get_trusted_devices(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kMainGetTrustedDevicesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainGetTrustedDevicesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_get_trusted_devices",
        argNames: [],
      );

  Future<void> mainRemoveTrustedDevices({required String json, dynamic hint}) {
    var arg0 = _platform.api2wire_String(json);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_remove_trusted_devices(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainRemoveTrustedDevicesConstMeta,
      argValues: [json],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainRemoveTrustedDevicesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_remove_trusted_devices",
        argNames: ["json"],
      );

  Future<void> mainClearTrustedDevices({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_main_clear_trusted_devices(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kMainClearTrustedDevicesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainClearTrustedDevicesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_clear_trusted_devices",
        argNames: [],
      );

  int mainMaxEncryptLen({dynamic hint}) {
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_main_max_encrypt_len(),
      parseSuccessData: _wire2api_usize,
      constMeta: kMainMaxEncryptLenConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMainMaxEncryptLenConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "main_max_encrypt_len",
        argNames: [],
      );

  Future<void> sessionRequestNewDisplayInitMsgs(
      {required UuidValue sessionId, required int display, dynamic hint}) {
    var arg0 = _platform.api2wire_Uuid(sessionId);
    var arg1 = api2wire_usize(display);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner
          .wire_session_request_new_display_init_msgs(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSessionRequestNewDisplayInitMsgsConstMeta,
      argValues: [sessionId, display],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta
      get kSessionRequestNewDisplayInitMsgsConstMeta =>
          const FlutterRustBridgeTaskConstMeta(
            debugName: "session_request_new_display_init_msgs",
            argNames: ["sessionId", "display"],
          );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  bool _wire2api_box_autoadd_bool(dynamic raw) {
    return raw as bool;
  }

  EventToUI _wire2api_event_to_ui(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return EventToUI_Event(
          _wire2api_String(raw[1]),
        );
      case 1:
        return EventToUI_Rgba(
          _wire2api_usize(raw[1]),
        );
      case 2:
        return EventToUI_Texture(
          _wire2api_usize(raw[1]),
          _wire2api_bool(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  Int32List _wire2api_int_32_list(dynamic raw) {
    return raw as Int32List;
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  bool? _wire2api_opt_box_autoadd_bool(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_bool(raw);
  }

  Int32List? _wire2api_opt_int_32_list(dynamic raw) {
    return raw == null ? null : _wire2api_int_32_list(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class RustdeskPlatform extends FlutterRustBridgeBase<RustdeskWire> {
  RustdeskPlatform(ffi.DynamicLibrary dylib) : super(RustdeskWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_StringList> api2wire_StringList(List<String> raw) {
    final ans = inner.new_StringList_0(raw.length);
    for (var i = 0; i < raw.length; i++) {
      ans.ref.ptr[i] = api2wire_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_Uuid(UuidValue raw) {
    return api2wire_uint_8_list(raw.toBytes());
  }

  @protected
  ffi.Pointer<wire_int_32_list> api2wire_int_32_list(Int32List raw) {
    final ans = inner.new_int_32_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustdeskWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustdeskWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustdeskWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_start_global_event_stream(
    int port_,
    ffi.Pointer<wire_uint_8_list> app_type,
  ) {
    return _wire_start_global_event_stream(
      port_,
      app_type,
    );
  }

  late final _wire_start_global_event_streamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_start_global_event_stream');
  late final _wire_start_global_event_stream =
      _wire_start_global_event_streamPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_stop_global_event_stream(
    int port_,
    ffi.Pointer<wire_uint_8_list> app_type,
  ) {
    return _wire_stop_global_event_stream(
      port_,
      app_type,
    );
  }

  late final _wire_stop_global_event_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_stop_global_event_stream');
  late final _wire_stop_global_event_stream = _wire_stop_global_event_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_host_stop_system_key_propagate(
    int port_,
    bool _stopped,
  ) {
    return _wire_host_stop_system_key_propagate(
      port_,
      _stopped,
    );
  }

  late final _wire_host_stop_system_key_propagatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_host_stop_system_key_propagate');
  late final _wire_host_stop_system_key_propagate =
      _wire_host_stop_system_key_propagatePtr
          .asFunction<void Function(int, bool)>();

  WireSyncReturn wire_peer_get_default_sessions_count(
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_peer_get_default_sessions_count(
      id,
    );
  }

  late final _wire_peer_get_default_sessions_countPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>(
      'wire_peer_get_default_sessions_count');
  late final _wire_peer_get_default_sessions_count =
      _wire_peer_get_default_sessions_countPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_session_add_existed_sync(
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_int_32_list> displays,
  ) {
    return _wire_session_add_existed_sync(
      id,
      session_id,
      displays,
    );
  }

  late final _wire_session_add_existed_syncPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_int_32_list>)>>('wire_session_add_existed_sync');
  late final _wire_session_add_existed_sync =
      _wire_session_add_existed_syncPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_int_32_list>)>();

  WireSyncReturn wire_session_add_sync(
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> id,
    bool is_file_transfer,
    bool is_port_forward,
    bool is_rdp,
    ffi.Pointer<wire_uint_8_list> switch_uuid,
    bool force_relay,
    ffi.Pointer<wire_uint_8_list> password,
    bool is_shared_password,
  ) {
    return _wire_session_add_sync(
      session_id,
      id,
      is_file_transfer,
      is_port_forward,
      is_rdp,
      switch_uuid,
      force_relay,
      password,
      is_shared_password,
    );
  }

  late final _wire_session_add_syncPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_add_sync');
  late final _wire_session_add_sync = _wire_session_add_syncPtr.asFunction<
      WireSyncReturn Function(
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          bool,
          bool,
          bool,
          ffi.Pointer<wire_uint_8_list>,
          bool,
          ffi.Pointer<wire_uint_8_list>,
          bool)>();

  void wire_session_start(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_session_start(
      port_,
      session_id,
      id,
    );
  }

  late final _wire_session_startPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_start');
  late final _wire_session_start = _wire_session_startPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_start_with_displays(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_int_32_list> displays,
  ) {
    return _wire_session_start_with_displays(
      port_,
      session_id,
      id,
      displays,
    );
  }

  late final _wire_session_start_with_displaysPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_int_32_list>)>>(
      'wire_session_start_with_displays');
  late final _wire_session_start_with_displays =
      _wire_session_start_with_displaysPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_int_32_list>)>();

  void wire_session_get_remember(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_get_remember(
      port_,
      session_id,
    );
  }

  late final _wire_session_get_rememberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_get_remember');
  late final _wire_session_get_remember = _wire_session_get_rememberPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_get_toggle_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> arg,
  ) {
    return _wire_session_get_toggle_option(
      port_,
      session_id,
      arg,
    );
  }

  late final _wire_session_get_toggle_optionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_get_toggle_option');
  late final _wire_session_get_toggle_option =
      _wire_session_get_toggle_optionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_session_get_toggle_option_sync(
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> arg,
  ) {
    return _wire_session_get_toggle_option_sync(
      session_id,
      arg,
    );
  }

  late final _wire_session_get_toggle_option_syncPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_get_toggle_option_sync');
  late final _wire_session_get_toggle_option_sync =
      _wire_session_get_toggle_option_syncPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_get_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> arg,
  ) {
    return _wire_session_get_option(
      port_,
      session_id,
      arg,
    );
  }

  late final _wire_session_get_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_get_option');
  late final _wire_session_get_option = _wire_session_get_optionPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_login(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> os_username,
    ffi.Pointer<wire_uint_8_list> os_password,
    ffi.Pointer<wire_uint_8_list> password,
    bool remember,
  ) {
    return _wire_session_login(
      port_,
      session_id,
      os_username,
      os_password,
      password,
      remember,
    );
  }

  late final _wire_session_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_login');
  late final _wire_session_login = _wire_session_loginPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          bool)>();

  void wire_session_send2fa(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> code,
    bool trust_this_device,
  ) {
    return _wire_session_send2fa(
      port_,
      session_id,
      code,
      trust_this_device,
    );
  }

  late final _wire_session_send2faPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_send2fa');
  late final _wire_session_send2fa = _wire_session_send2faPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, bool)>();

  WireSyncReturn wire_session_get_enable_trusted_devices(
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_get_enable_trusted_devices(
      session_id,
    );
  }

  late final _wire_session_get_enable_trusted_devicesPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_get_enable_trusted_devices');
  late final _wire_session_get_enable_trusted_devices =
      _wire_session_get_enable_trusted_devicesPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_close(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_close(
      port_,
      session_id,
    );
  }

  late final _wire_session_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_session_close');
  late final _wire_session_close = _wire_session_closePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_refresh(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int display,
  ) {
    return _wire_session_refresh(
      port_,
      session_id,
      display,
    );
  }

  late final _wire_session_refreshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.UintPtr)>>('wire_session_refresh');
  late final _wire_session_refresh = _wire_session_refreshPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  WireSyncReturn wire_session_is_multi_ui_session(
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_is_multi_ui_session(
      session_id,
    );
  }

  late final _wire_session_is_multi_ui_sessionPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_is_multi_ui_session');
  late final _wire_session_is_multi_ui_session =
      _wire_session_is_multi_ui_sessionPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_record_screen(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    bool start,
    int display,
    int width,
    int height,
  ) {
    return _wire_session_record_screen(
      port_,
      session_id,
      start,
      display,
      width,
      height,
    );
  }

  late final _wire_session_record_screenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool,
              ffi.UintPtr,
              ffi.UintPtr,
              ffi.UintPtr)>>('wire_session_record_screen');
  late final _wire_session_record_screen =
      _wire_session_record_screenPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_uint_8_list>, bool, int, int, int)>();

  void wire_session_record_status(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    bool status,
  ) {
    return _wire_session_record_status(
      port_,
      session_id,
      status,
    );
  }

  late final _wire_session_record_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_record_status');
  late final _wire_session_record_status = _wire_session_record_statusPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_session_reconnect(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    bool force_relay,
  ) {
    return _wire_session_reconnect(
      port_,
      session_id,
      force_relay,
    );
  }

  late final _wire_session_reconnectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_reconnect');
  late final _wire_session_reconnect = _wire_session_reconnectPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_session_toggle_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_session_toggle_option(
      port_,
      session_id,
      value,
    );
  }

  late final _wire_session_toggle_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_toggle_option');
  late final _wire_session_toggle_option =
      _wire_session_toggle_optionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_toggle_privacy_mode(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> impl_key,
    bool on1,
  ) {
    return _wire_session_toggle_privacy_mode(
      port_,
      session_id,
      impl_key,
      on1,
    );
  }

  late final _wire_session_toggle_privacy_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_toggle_privacy_mode');
  late final _wire_session_toggle_privacy_mode =
      _wire_session_toggle_privacy_modePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_session_get_flutter_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> k,
  ) {
    return _wire_session_get_flutter_option(
      port_,
      session_id,
      k,
    );
  }

  late final _wire_session_get_flutter_optionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_get_flutter_option');
  late final _wire_session_get_flutter_option =
      _wire_session_get_flutter_optionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_set_flutter_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> k,
    ffi.Pointer<wire_uint_8_list> v,
  ) {
    return _wire_session_set_flutter_option(
      port_,
      session_id,
      k,
      v,
    );
  }

  late final _wire_session_set_flutter_optionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_set_flutter_option');
  late final _wire_session_set_flutter_option =
      _wire_session_set_flutter_optionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_get_next_texture_key() {
    return _wire_get_next_texture_key();
  }

  late final _wire_get_next_texture_keyPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_get_next_texture_key');
  late final _wire_get_next_texture_key =
      _wire_get_next_texture_keyPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_get_local_flutter_option(
    ffi.Pointer<wire_uint_8_list> k,
  ) {
    return _wire_get_local_flutter_option(
      k,
    );
  }

  late final _wire_get_local_flutter_optionPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_local_flutter_option');
  late final _wire_get_local_flutter_option = _wire_get_local_flutter_optionPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_local_flutter_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> k,
    ffi.Pointer<wire_uint_8_list> v,
  ) {
    return _wire_set_local_flutter_option(
      port_,
      k,
      v,
    );
  }

  late final _wire_set_local_flutter_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set_local_flutter_option');
  late final _wire_set_local_flutter_option =
      _wire_set_local_flutter_optionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_get_local_kb_layout_type() {
    return _wire_get_local_kb_layout_type();
  }

  late final _wire_get_local_kb_layout_typePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_get_local_kb_layout_type');
  late final _wire_get_local_kb_layout_type =
      _wire_get_local_kb_layout_typePtr.asFunction<WireSyncReturn Function()>();

  void wire_set_local_kb_layout_type(
    int port_,
    ffi.Pointer<wire_uint_8_list> kb_layout_type,
  ) {
    return _wire_set_local_kb_layout_type(
      port_,
      kb_layout_type,
    );
  }

  late final _wire_set_local_kb_layout_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set_local_kb_layout_type');
  late final _wire_set_local_kb_layout_type = _wire_set_local_kb_layout_typePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_get_view_style(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_get_view_style(
      port_,
      session_id,
    );
  }

  late final _wire_session_get_view_stylePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_get_view_style');
  late final _wire_session_get_view_style = _wire_session_get_view_stylePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_set_view_style(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_session_set_view_style(
      port_,
      session_id,
      value,
    );
  }

  late final _wire_session_set_view_stylePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_set_view_style');
  late final _wire_session_set_view_style =
      _wire_session_set_view_stylePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_get_scroll_style(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_get_scroll_style(
      port_,
      session_id,
    );
  }

  late final _wire_session_get_scroll_stylePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_get_scroll_style');
  late final _wire_session_get_scroll_style = _wire_session_get_scroll_stylePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_set_scroll_style(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_session_set_scroll_style(
      port_,
      session_id,
      value,
    );
  }

  late final _wire_session_set_scroll_stylePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_set_scroll_style');
  late final _wire_session_set_scroll_style =
      _wire_session_set_scroll_stylePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_get_image_quality(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_get_image_quality(
      port_,
      session_id,
    );
  }

  late final _wire_session_get_image_qualityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_get_image_quality');
  late final _wire_session_get_image_quality =
      _wire_session_get_image_qualityPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_set_image_quality(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_session_set_image_quality(
      port_,
      session_id,
      value,
    );
  }

  late final _wire_session_set_image_qualityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_set_image_quality');
  late final _wire_session_set_image_quality =
      _wire_session_set_image_qualityPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_get_keyboard_mode(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_get_keyboard_mode(
      port_,
      session_id,
    );
  }

  late final _wire_session_get_keyboard_modePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_get_keyboard_mode');
  late final _wire_session_get_keyboard_mode =
      _wire_session_get_keyboard_modePtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_set_keyboard_mode(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_session_set_keyboard_mode(
      port_,
      session_id,
      value,
    );
  }

  late final _wire_session_set_keyboard_modePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_set_keyboard_mode');
  late final _wire_session_set_keyboard_mode =
      _wire_session_set_keyboard_modePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_session_get_reverse_mouse_wheel_sync(
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_get_reverse_mouse_wheel_sync(
      session_id,
    );
  }

  late final _wire_session_get_reverse_mouse_wheel_syncPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_get_reverse_mouse_wheel_sync');
  late final _wire_session_get_reverse_mouse_wheel_sync =
      _wire_session_get_reverse_mouse_wheel_syncPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_set_reverse_mouse_wheel(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_session_set_reverse_mouse_wheel(
      port_,
      session_id,
      value,
    );
  }

  late final _wire_session_set_reverse_mouse_wheelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_set_reverse_mouse_wheel');
  late final _wire_session_set_reverse_mouse_wheel =
      _wire_session_set_reverse_mouse_wheelPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_session_get_displays_as_individual_windows(
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_get_displays_as_individual_windows(
      session_id,
    );
  }

  late final _wire_session_get_displays_as_individual_windowsPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_get_displays_as_individual_windows');
  late final _wire_session_get_displays_as_individual_windows =
      _wire_session_get_displays_as_individual_windowsPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_set_displays_as_individual_windows(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_session_set_displays_as_individual_windows(
      port_,
      session_id,
      value,
    );
  }

  late final _wire_session_set_displays_as_individual_windowsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_set_displays_as_individual_windows');
  late final _wire_session_set_displays_as_individual_windows =
      _wire_session_set_displays_as_individual_windowsPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_session_get_use_all_my_displays_for_the_remote_session(
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_get_use_all_my_displays_for_the_remote_session(
      session_id,
    );
  }

  late final _wire_session_get_use_all_my_displays_for_the_remote_sessionPtr =
      _lookup<
              ffi.NativeFunction<
                  WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>(
          'wire_session_get_use_all_my_displays_for_the_remote_session');
  late final _wire_session_get_use_all_my_displays_for_the_remote_session =
      _wire_session_get_use_all_my_displays_for_the_remote_sessionPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_set_use_all_my_displays_for_the_remote_session(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_session_set_use_all_my_displays_for_the_remote_session(
      port_,
      session_id,
      value,
    );
  }

  late final _wire_session_set_use_all_my_displays_for_the_remote_sessionPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                      ffi.Pointer<wire_uint_8_list>)>>(
          'wire_session_set_use_all_my_displays_for_the_remote_session');
  late final _wire_session_set_use_all_my_displays_for_the_remote_session =
      _wire_session_set_use_all_my_displays_for_the_remote_sessionPtr
          .asFunction<
              void Function(int, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_get_custom_image_quality(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_get_custom_image_quality(
      port_,
      session_id,
    );
  }

  late final _wire_session_get_custom_image_qualityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_get_custom_image_quality');
  late final _wire_session_get_custom_image_quality =
      _wire_session_get_custom_image_qualityPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_session_is_keyboard_mode_supported(
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> mode,
  ) {
    return _wire_session_is_keyboard_mode_supported(
      session_id,
      mode,
    );
  }

  late final _wire_session_is_keyboard_mode_supportedPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_is_keyboard_mode_supported');
  late final _wire_session_is_keyboard_mode_supported =
      _wire_session_is_keyboard_mode_supportedPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_set_custom_image_quality(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int value,
  ) {
    return _wire_session_set_custom_image_quality(
      port_,
      session_id,
      value,
    );
  }

  late final _wire_session_set_custom_image_qualityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_session_set_custom_image_quality');
  late final _wire_session_set_custom_image_quality =
      _wire_session_set_custom_image_qualityPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_session_set_custom_fps(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int fps,
  ) {
    return _wire_session_set_custom_fps(
      port_,
      session_id,
      fps,
    );
  }

  late final _wire_session_set_custom_fpsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_session_set_custom_fps');
  late final _wire_session_set_custom_fps = _wire_session_set_custom_fpsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_session_lock_screen(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_lock_screen(
      port_,
      session_id,
    );
  }

  late final _wire_session_lock_screenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_lock_screen');
  late final _wire_session_lock_screen = _wire_session_lock_screenPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_ctrl_alt_del(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_ctrl_alt_del(
      port_,
      session_id,
    );
  }

  late final _wire_session_ctrl_alt_delPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_ctrl_alt_del');
  late final _wire_session_ctrl_alt_del = _wire_session_ctrl_alt_delPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_switch_display(
    int port_,
    bool is_desktop,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_int_32_list> value,
  ) {
    return _wire_session_switch_display(
      port_,
      is_desktop,
      session_id,
      value,
    );
  }

  late final _wire_session_switch_displayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Bool, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_int_32_list>)>>('wire_session_switch_display');
  late final _wire_session_switch_display =
      _wire_session_switch_displayPtr.asFunction<
          void Function(int, bool, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_int_32_list>)>();

  void wire_session_handle_flutter_key_event(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> character,
    int usb_hid,
    int lock_modes,
    bool down_or_up,
  ) {
    return _wire_session_handle_flutter_key_event(
      port_,
      session_id,
      character,
      usb_hid,
      lock_modes,
      down_or_up,
    );
  }

  late final _wire_session_handle_flutter_key_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Int32,
              ffi.Bool)>>('wire_session_handle_flutter_key_event');
  late final _wire_session_handle_flutter_key_event =
      _wire_session_handle_flutter_key_eventPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, int, int, bool)>();

  void wire_session_handle_flutter_raw_key_event(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> name,
    int platform_code,
    int position_code,
    int lock_modes,
    bool down_or_up,
  ) {
    return _wire_session_handle_flutter_raw_key_event(
      port_,
      session_id,
      name,
      platform_code,
      position_code,
      lock_modes,
      down_or_up,
    );
  }

  late final _wire_session_handle_flutter_raw_key_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Bool)>>('wire_session_handle_flutter_raw_key_event');
  late final _wire_session_handle_flutter_raw_key_event =
      _wire_session_handle_flutter_raw_key_eventPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, int, int, int, bool)>();

  WireSyncReturn wire_session_enter_or_leave(
    ffi.Pointer<wire_uint_8_list> _session_id,
    bool _enter,
  ) {
    return _wire_session_enter_or_leave(
      _session_id,
      _enter,
    );
  }

  late final _wire_session_enter_or_leavePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_enter_or_leave');
  late final _wire_session_enter_or_leave =
      _wire_session_enter_or_leavePtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_session_input_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> name,
    bool down,
    bool press,
    bool alt,
    bool ctrl,
    bool shift,
    bool command,
  ) {
    return _wire_session_input_key(
      port_,
      session_id,
      name,
      down,
      press,
      alt,
      ctrl,
      shift,
      command,
    );
  }

  late final _wire_session_input_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool)>>('wire_session_input_key');
  late final _wire_session_input_key = _wire_session_input_keyPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, bool, bool, bool, bool, bool, bool)>();

  void wire_session_input_string(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_session_input_string(
      port_,
      session_id,
      value,
    );
  }

  late final _wire_session_input_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_input_string');
  late final _wire_session_input_string =
      _wire_session_input_stringPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_send_chat(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> text,
  ) {
    return _wire_session_send_chat(
      port_,
      session_id,
      text,
    );
  }

  late final _wire_session_send_chatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_send_chat');
  late final _wire_session_send_chat = _wire_session_send_chatPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_peer_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_session_peer_option(
      port_,
      session_id,
      name,
      value,
    );
  }

  late final _wire_session_peer_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_peer_option');
  late final _wire_session_peer_option =
      _wire_session_peer_optionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_get_peer_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_session_get_peer_option(
      port_,
      session_id,
      name,
    );
  }

  late final _wire_session_get_peer_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_get_peer_option');
  late final _wire_session_get_peer_option =
      _wire_session_get_peer_optionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_input_os_password(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_session_input_os_password(
      port_,
      session_id,
      value,
    );
  }

  late final _wire_session_input_os_passwordPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_input_os_password');
  late final _wire_session_input_os_password =
      _wire_session_input_os_passwordPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_read_remote_dir(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> path,
    bool include_hidden,
  ) {
    return _wire_session_read_remote_dir(
      port_,
      session_id,
      path,
      include_hidden,
    );
  }

  late final _wire_session_read_remote_dirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_read_remote_dir');
  late final _wire_session_read_remote_dir =
      _wire_session_read_remote_dirPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_session_send_files(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int act_id,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> to,
    int file_num,
    bool include_hidden,
    bool is_remote,
  ) {
    return _wire_session_send_files(
      port_,
      session_id,
      act_id,
      path,
      to,
      file_num,
      include_hidden,
      is_remote,
    );
  }

  late final _wire_session_send_filesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Bool,
              ffi.Bool)>>('wire_session_send_files');
  late final _wire_session_send_files = _wire_session_send_filesPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          bool,
          bool)>();

  void wire_session_set_confirm_override_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int act_id,
    int file_num,
    bool need_override,
    bool remember,
    bool is_upload,
  ) {
    return _wire_session_set_confirm_override_file(
      port_,
      session_id,
      act_id,
      file_num,
      need_override,
      remember,
      is_upload,
    );
  }

  late final _wire_session_set_confirm_override_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Int32,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool)>>('wire_session_set_confirm_override_file');
  late final _wire_session_set_confirm_override_file =
      _wire_session_set_confirm_override_filePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, bool,
              bool, bool)>();

  void wire_session_remove_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int act_id,
    ffi.Pointer<wire_uint_8_list> path,
    int file_num,
    bool is_remote,
  ) {
    return _wire_session_remove_file(
      port_,
      session_id,
      act_id,
      path,
      file_num,
      is_remote,
    );
  }

  late final _wire_session_remove_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Bool)>>('wire_session_remove_file');
  late final _wire_session_remove_file =
      _wire_session_remove_filePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int,
              ffi.Pointer<wire_uint_8_list>, int, bool)>();

  void wire_session_read_dir_recursive(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int act_id,
    ffi.Pointer<wire_uint_8_list> path,
    bool is_remote,
    bool show_hidden,
  ) {
    return _wire_session_read_dir_recursive(
      port_,
      session_id,
      act_id,
      path,
      is_remote,
      show_hidden,
    );
  }

  late final _wire_session_read_dir_recursivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool,
              ffi.Bool)>>('wire_session_read_dir_recursive');
  late final _wire_session_read_dir_recursive =
      _wire_session_read_dir_recursivePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int,
              ffi.Pointer<wire_uint_8_list>, bool, bool)>();

  void wire_session_remove_all_empty_dirs(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int act_id,
    ffi.Pointer<wire_uint_8_list> path,
    bool is_remote,
  ) {
    return _wire_session_remove_all_empty_dirs(
      port_,
      session_id,
      act_id,
      path,
      is_remote,
    );
  }

  late final _wire_session_remove_all_empty_dirsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_remove_all_empty_dirs');
  late final _wire_session_remove_all_empty_dirs =
      _wire_session_remove_all_empty_dirsPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int,
              ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_session_cancel_job(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int act_id,
  ) {
    return _wire_session_cancel_job(
      port_,
      session_id,
      act_id,
    );
  }

  late final _wire_session_cancel_jobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_session_cancel_job');
  late final _wire_session_cancel_job = _wire_session_cancel_jobPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_session_create_dir(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int act_id,
    ffi.Pointer<wire_uint_8_list> path,
    bool is_remote,
  ) {
    return _wire_session_create_dir(
      port_,
      session_id,
      act_id,
      path,
      is_remote,
    );
  }

  late final _wire_session_create_dirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_create_dir');
  late final _wire_session_create_dir = _wire_session_create_dirPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, int,
          ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_session_read_local_dir_sync(
    int port_,
    ffi.Pointer<wire_uint_8_list> _session_id,
    ffi.Pointer<wire_uint_8_list> path,
    bool show_hidden,
  ) {
    return _wire_session_read_local_dir_sync(
      port_,
      _session_id,
      path,
      show_hidden,
    );
  }

  late final _wire_session_read_local_dir_syncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_read_local_dir_sync');
  late final _wire_session_read_local_dir_sync =
      _wire_session_read_local_dir_syncPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_session_get_platform(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    bool is_remote,
  ) {
    return _wire_session_get_platform(
      port_,
      session_id,
      is_remote,
    );
  }

  late final _wire_session_get_platformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_get_platform');
  late final _wire_session_get_platform = _wire_session_get_platformPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_session_load_last_transfer_jobs(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_load_last_transfer_jobs(
      port_,
      session_id,
    );
  }

  late final _wire_session_load_last_transfer_jobsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_load_last_transfer_jobs');
  late final _wire_session_load_last_transfer_jobs =
      _wire_session_load_last_transfer_jobsPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_add_job(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int act_id,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> to,
    int file_num,
    bool include_hidden,
    bool is_remote,
  ) {
    return _wire_session_add_job(
      port_,
      session_id,
      act_id,
      path,
      to,
      file_num,
      include_hidden,
      is_remote,
    );
  }

  late final _wire_session_add_jobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Bool,
              ffi.Bool)>>('wire_session_add_job');
  late final _wire_session_add_job = _wire_session_add_jobPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          bool,
          bool)>();

  void wire_session_resume_job(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int act_id,
    bool is_remote,
  ) {
    return _wire_session_resume_job(
      port_,
      session_id,
      act_id,
      is_remote,
    );
  }

  late final _wire_session_resume_jobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int32,
              ffi.Bool)>>('wire_session_resume_job');
  late final _wire_session_resume_job = _wire_session_resume_jobPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, int, bool)>();

  void wire_session_rename_file(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int act_id,
    ffi.Pointer<wire_uint_8_list> path,
    ffi.Pointer<wire_uint_8_list> new_name,
    bool is_remote,
  ) {
    return _wire_session_rename_file(
      port_,
      session_id,
      act_id,
      path,
      new_name,
      is_remote,
    );
  }

  late final _wire_session_rename_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_session_rename_file');
  late final _wire_session_rename_file =
      _wire_session_rename_filePtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              bool)>();

  void wire_session_elevate_direct(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_elevate_direct(
      port_,
      session_id,
    );
  }

  late final _wire_session_elevate_directPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_elevate_direct');
  late final _wire_session_elevate_direct = _wire_session_elevate_directPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_elevate_with_logon(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> username,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_session_elevate_with_logon(
      port_,
      session_id,
      username,
      password,
    );
  }

  late final _wire_session_elevate_with_logonPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_elevate_with_logon');
  late final _wire_session_elevate_with_logon =
      _wire_session_elevate_with_logonPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_switch_sides(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_switch_sides(
      port_,
      session_id,
    );
  }

  late final _wire_session_switch_sidesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_switch_sides');
  late final _wire_session_switch_sides = _wire_session_switch_sidesPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_change_resolution(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int display,
    int width,
    int height,
  ) {
    return _wire_session_change_resolution(
      port_,
      session_id,
      display,
      width,
      height,
    );
  }

  late final _wire_session_change_resolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('wire_session_change_resolution');
  late final _wire_session_change_resolution =
      _wire_session_change_resolutionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, int)>();

  void wire_session_set_size(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int display,
    int width,
    int height,
  ) {
    return _wire_session_set_size(
      port_,
      session_id,
      display,
      width,
      height,
    );
  }

  late final _wire_session_set_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.UintPtr, ffi.UintPtr, ffi.UintPtr)>>('wire_session_set_size');
  late final _wire_session_set_size = _wire_session_set_sizePtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>, int, int, int)>();

  void wire_session_send_selected_session_id(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> sid,
  ) {
    return _wire_session_send_selected_session_id(
      port_,
      session_id,
      sid,
    );
  }

  late final _wire_session_send_selected_session_idPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_send_selected_session_id');
  late final _wire_session_send_selected_session_id =
      _wire_session_send_selected_session_idPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_get_sound_inputs(
    int port_,
  ) {
    return _wire_main_get_sound_inputs(
      port_,
    );
  }

  late final _wire_main_get_sound_inputsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_sound_inputs');
  late final _wire_main_get_sound_inputs =
      _wire_main_get_sound_inputsPtr.asFunction<void Function(int)>();

  void wire_main_get_default_sound_input(
    int port_,
  ) {
    return _wire_main_get_default_sound_input(
      port_,
    );
  }

  late final _wire_main_get_default_sound_inputPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_default_sound_input');
  late final _wire_main_get_default_sound_input =
      _wire_main_get_default_sound_inputPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_main_get_login_device_info() {
    return _wire_main_get_login_device_info();
  }

  late final _wire_main_get_login_device_infoPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_get_login_device_info');
  late final _wire_main_get_login_device_info =
      _wire_main_get_login_device_infoPtr
          .asFunction<WireSyncReturn Function()>();

  void wire_main_change_id(
    int port_,
    ffi.Pointer<wire_uint_8_list> new_id,
  ) {
    return _wire_main_change_id(
      port_,
      new_id,
    );
  }

  late final _wire_main_change_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_change_id');
  late final _wire_main_change_id = _wire_main_change_idPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_get_async_status(
    int port_,
  ) {
    return _wire_main_get_async_status(
      port_,
    );
  }

  late final _wire_main_get_async_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_async_status');
  late final _wire_main_get_async_status =
      _wire_main_get_async_statusPtr.asFunction<void Function(int)>();

  void wire_main_get_http_status(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
  ) {
    return _wire_main_get_http_status(
      port_,
      url,
    );
  }

  late final _wire_main_get_http_statusPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_get_http_status');
  late final _wire_main_get_http_status = _wire_main_get_http_statusPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_get_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_main_get_option(
      port_,
      key,
    );
  }

  late final _wire_main_get_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_get_option');
  late final _wire_main_get_option = _wire_main_get_optionPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_get_option_sync(
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_main_get_option_sync(
      key,
    );
  }

  late final _wire_main_get_option_syncPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_get_option_sync');
  late final _wire_main_get_option_sync = _wire_main_get_option_syncPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_get_error(
    int port_,
  ) {
    return _wire_main_get_error(
      port_,
    );
  }

  late final _wire_main_get_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_error');
  late final _wire_main_get_error =
      _wire_main_get_errorPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_main_show_option(
    ffi.Pointer<wire_uint_8_list> _key,
  ) {
    return _wire_main_show_option(
      _key,
    );
  }

  late final _wire_main_show_optionPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_show_option');
  late final _wire_main_show_option = _wire_main_show_optionPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_set_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_main_set_option(
      port_,
      key,
      value,
    );
  }

  late final _wire_main_set_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_set_option');
  late final _wire_main_set_option = _wire_main_set_optionPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_get_options(
    int port_,
  ) {
    return _wire_main_get_options(
      port_,
    );
  }

  late final _wire_main_get_optionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_options');
  late final _wire_main_get_options =
      _wire_main_get_optionsPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_main_get_options_sync() {
    return _wire_main_get_options_sync();
  }

  late final _wire_main_get_options_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_get_options_sync');
  late final _wire_main_get_options_sync =
      _wire_main_get_options_syncPtr.asFunction<WireSyncReturn Function()>();

  void wire_main_set_options(
    int port_,
    ffi.Pointer<wire_uint_8_list> json,
  ) {
    return _wire_main_set_options(
      port_,
      json,
    );
  }

  late final _wire_main_set_optionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_set_options');
  late final _wire_main_set_options = _wire_main_set_optionsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_test_if_valid_server(
    int port_,
    ffi.Pointer<wire_uint_8_list> server,
    bool test_with_proxy,
  ) {
    return _wire_main_test_if_valid_server(
      port_,
      server,
      test_with_proxy,
    );
  }

  late final _wire_main_test_if_valid_serverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_main_test_if_valid_server');
  late final _wire_main_test_if_valid_server =
      _wire_main_test_if_valid_serverPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_main_set_socks(
    int port_,
    ffi.Pointer<wire_uint_8_list> proxy,
    ffi.Pointer<wire_uint_8_list> username,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_main_set_socks(
      port_,
      proxy,
      username,
      password,
    );
  }

  late final _wire_main_set_socksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_set_socks');
  late final _wire_main_set_socks = _wire_main_set_socksPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_get_proxy_status(
    int port_,
  ) {
    return _wire_main_get_proxy_status(
      port_,
    );
  }

  late final _wire_main_get_proxy_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_proxy_status');
  late final _wire_main_get_proxy_status =
      _wire_main_get_proxy_statusPtr.asFunction<void Function(int)>();

  void wire_main_get_socks(
    int port_,
  ) {
    return _wire_main_get_socks(
      port_,
    );
  }

  late final _wire_main_get_socksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_socks');
  late final _wire_main_get_socks =
      _wire_main_get_socksPtr.asFunction<void Function(int)>();

  void wire_main_get_app_name(
    int port_,
  ) {
    return _wire_main_get_app_name(
      port_,
    );
  }

  late final _wire_main_get_app_namePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_app_name');
  late final _wire_main_get_app_name =
      _wire_main_get_app_namePtr.asFunction<void Function(int)>();

  WireSyncReturn wire_main_get_app_name_sync() {
    return _wire_main_get_app_name_sync();
  }

  late final _wire_main_get_app_name_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_get_app_name_sync');
  late final _wire_main_get_app_name_sync =
      _wire_main_get_app_name_syncPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_uri_prefix_sync() {
    return _wire_main_uri_prefix_sync();
  }

  late final _wire_main_uri_prefix_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_uri_prefix_sync');
  late final _wire_main_uri_prefix_sync =
      _wire_main_uri_prefix_syncPtr.asFunction<WireSyncReturn Function()>();

  void wire_main_get_license(
    int port_,
  ) {
    return _wire_main_get_license(
      port_,
    );
  }

  late final _wire_main_get_licensePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_license');
  late final _wire_main_get_license =
      _wire_main_get_licensePtr.asFunction<void Function(int)>();

  void wire_main_get_version(
    int port_,
  ) {
    return _wire_main_get_version(
      port_,
    );
  }

  late final _wire_main_get_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_version');
  late final _wire_main_get_version =
      _wire_main_get_versionPtr.asFunction<void Function(int)>();

  void wire_main_get_fav(
    int port_,
  ) {
    return _wire_main_get_fav(
      port_,
    );
  }

  late final _wire_main_get_favPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_fav');
  late final _wire_main_get_fav =
      _wire_main_get_favPtr.asFunction<void Function(int)>();

  void wire_main_store_fav(
    int port_,
    ffi.Pointer<wire_StringList> favs,
  ) {
    return _wire_main_store_fav(
      port_,
      favs,
    );
  }

  late final _wire_main_store_favPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_StringList>)>>('wire_main_store_fav');
  late final _wire_main_store_fav = _wire_main_store_favPtr
      .asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  WireSyncReturn wire_main_get_peer_sync(
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_main_get_peer_sync(
      id,
    );
  }

  late final _wire_main_get_peer_syncPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_get_peer_sync');
  late final _wire_main_get_peer_sync = _wire_main_get_peer_syncPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_get_lan_peers(
    int port_,
  ) {
    return _wire_main_get_lan_peers(
      port_,
    );
  }

  late final _wire_main_get_lan_peersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_lan_peers');
  late final _wire_main_get_lan_peers =
      _wire_main_get_lan_peersPtr.asFunction<void Function(int)>();

  void wire_main_get_connect_status(
    int port_,
  ) {
    return _wire_main_get_connect_status(
      port_,
    );
  }

  late final _wire_main_get_connect_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_connect_status');
  late final _wire_main_get_connect_status =
      _wire_main_get_connect_statusPtr.asFunction<void Function(int)>();

  void wire_main_check_connect_status(
    int port_,
  ) {
    return _wire_main_check_connect_status(
      port_,
    );
  }

  late final _wire_main_check_connect_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_check_connect_status');
  late final _wire_main_check_connect_status =
      _wire_main_check_connect_statusPtr.asFunction<void Function(int)>();

  void wire_main_is_using_public_server(
    int port_,
  ) {
    return _wire_main_is_using_public_server(
      port_,
    );
  }

  late final _wire_main_is_using_public_serverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_is_using_public_server');
  late final _wire_main_is_using_public_server =
      _wire_main_is_using_public_serverPtr.asFunction<void Function(int)>();

  void wire_main_discover(
    int port_,
  ) {
    return _wire_main_discover(
      port_,
    );
  }

  late final _wire_main_discoverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_discover');
  late final _wire_main_discover =
      _wire_main_discoverPtr.asFunction<void Function(int)>();

  void wire_main_get_api_server(
    int port_,
  ) {
    return _wire_main_get_api_server(
      port_,
    );
  }

  late final _wire_main_get_api_serverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_api_server');
  late final _wire_main_get_api_server =
      _wire_main_get_api_serverPtr.asFunction<void Function(int)>();

  void wire_main_http_request(
    int port_,
    ffi.Pointer<wire_uint_8_list> url,
    ffi.Pointer<wire_uint_8_list> method,
    ffi.Pointer<wire_uint_8_list> body,
    ffi.Pointer<wire_uint_8_list> header,
  ) {
    return _wire_main_http_request(
      port_,
      url,
      method,
      body,
      header,
    );
  }

  late final _wire_main_http_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_http_request');
  late final _wire_main_http_request = _wire_main_http_requestPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_get_local_option(
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_main_get_local_option(
      key,
    );
  }

  late final _wire_main_get_local_optionPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_get_local_option');
  late final _wire_main_get_local_option = _wire_main_get_local_optionPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_get_use_texture_render() {
    return _wire_main_get_use_texture_render();
  }

  late final _wire_main_get_use_texture_renderPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_get_use_texture_render');
  late final _wire_main_get_use_texture_render =
      _wire_main_get_use_texture_renderPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_get_env(
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_main_get_env(
      key,
    );
  }

  late final _wire_main_get_envPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_get_env');
  late final _wire_main_get_env = _wire_main_get_envPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_set_local_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_main_set_local_option(
      port_,
      key,
      value,
    );
  }

  late final _wire_main_set_local_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_set_local_option');
  late final _wire_main_set_local_option =
      _wire_main_set_local_optionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_handle_wayland_screencast_restore_token(
    int port_,
    ffi.Pointer<wire_uint_8_list> _key,
    ffi.Pointer<wire_uint_8_list> _value,
  ) {
    return _wire_main_handle_wayland_screencast_restore_token(
      port_,
      _key,
      _value,
    );
  }

  late final _wire_main_handle_wayland_screencast_restore_tokenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_main_handle_wayland_screencast_restore_token');
  late final _wire_main_handle_wayland_screencast_restore_token =
      _wire_main_handle_wayland_screencast_restore_tokenPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_get_input_source() {
    return _wire_main_get_input_source();
  }

  late final _wire_main_get_input_sourcePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_get_input_source');
  late final _wire_main_get_input_source =
      _wire_main_get_input_sourcePtr.asFunction<WireSyncReturn Function()>();

  void wire_main_set_input_source(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_main_set_input_source(
      port_,
      session_id,
      value,
    );
  }

  late final _wire_main_set_input_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_set_input_source');
  late final _wire_main_set_input_source =
      _wire_main_set_input_sourcePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_get_my_id(
    int port_,
  ) {
    return _wire_main_get_my_id(
      port_,
    );
  }

  late final _wire_main_get_my_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_my_id');
  late final _wire_main_get_my_id =
      _wire_main_get_my_idPtr.asFunction<void Function(int)>();

  void wire_main_get_uuid(
    int port_,
  ) {
    return _wire_main_get_uuid(
      port_,
    );
  }

  late final _wire_main_get_uuidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_uuid');
  late final _wire_main_get_uuid =
      _wire_main_get_uuidPtr.asFunction<void Function(int)>();

  void wire_main_get_peer_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_main_get_peer_option(
      port_,
      id,
      key,
    );
  }

  late final _wire_main_get_peer_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_get_peer_option');
  late final _wire_main_get_peer_option =
      _wire_main_get_peer_optionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_get_peer_option_sync(
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_main_get_peer_option_sync(
      id,
      key,
    );
  }

  late final _wire_main_get_peer_option_syncPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_main_get_peer_option_sync');
  late final _wire_main_get_peer_option_sync =
      _wire_main_get_peer_option_syncPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_get_peer_flutter_option_sync(
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> k,
  ) {
    return _wire_main_get_peer_flutter_option_sync(
      id,
      k,
    );
  }

  late final _wire_main_get_peer_flutter_option_syncPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_main_get_peer_flutter_option_sync');
  late final _wire_main_get_peer_flutter_option_sync =
      _wire_main_get_peer_flutter_option_syncPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_set_peer_flutter_option_sync(
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> k,
    ffi.Pointer<wire_uint_8_list> v,
  ) {
    return _wire_main_set_peer_flutter_option_sync(
      id,
      k,
      v,
    );
  }

  late final _wire_main_set_peer_flutter_option_syncPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_main_set_peer_flutter_option_sync');
  late final _wire_main_set_peer_flutter_option_sync =
      _wire_main_set_peer_flutter_option_syncPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_set_peer_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_main_set_peer_option(
      port_,
      id,
      key,
      value,
    );
  }

  late final _wire_main_set_peer_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_set_peer_option');
  late final _wire_main_set_peer_option =
      _wire_main_set_peer_optionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_set_peer_option_sync(
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_main_set_peer_option_sync(
      id,
      key,
      value,
    );
  }

  late final _wire_main_set_peer_option_syncPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_main_set_peer_option_sync');
  late final _wire_main_set_peer_option_sync =
      _wire_main_set_peer_option_syncPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_set_peer_alias(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
    ffi.Pointer<wire_uint_8_list> alias,
  ) {
    return _wire_main_set_peer_alias(
      port_,
      id,
      alias,
    );
  }

  late final _wire_main_set_peer_aliasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_set_peer_alias');
  late final _wire_main_set_peer_alias =
      _wire_main_set_peer_aliasPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_get_new_stored_peers(
    int port_,
  ) {
    return _wire_main_get_new_stored_peers(
      port_,
    );
  }

  late final _wire_main_get_new_stored_peersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_new_stored_peers');
  late final _wire_main_get_new_stored_peers =
      _wire_main_get_new_stored_peersPtr.asFunction<void Function(int)>();

  void wire_main_forget_password(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_main_forget_password(
      port_,
      id,
    );
  }

  late final _wire_main_forget_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_forget_password');
  late final _wire_main_forget_password = _wire_main_forget_passwordPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_peer_has_password(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_main_peer_has_password(
      port_,
      id,
    );
  }

  late final _wire_main_peer_has_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_peer_has_password');
  late final _wire_main_peer_has_password = _wire_main_peer_has_passwordPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_peer_exists(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_main_peer_exists(
      port_,
      id,
    );
  }

  late final _wire_main_peer_existsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_peer_exists');
  late final _wire_main_peer_exists = _wire_main_peer_existsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_load_recent_peers(
    int port_,
  ) {
    return _wire_main_load_recent_peers(
      port_,
    );
  }

  late final _wire_main_load_recent_peersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_load_recent_peers');
  late final _wire_main_load_recent_peers =
      _wire_main_load_recent_peersPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_main_load_recent_peers_sync() {
    return _wire_main_load_recent_peers_sync();
  }

  late final _wire_main_load_recent_peers_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_load_recent_peers_sync');
  late final _wire_main_load_recent_peers_sync =
      _wire_main_load_recent_peers_syncPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_load_lan_peers_sync() {
    return _wire_main_load_lan_peers_sync();
  }

  late final _wire_main_load_lan_peers_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_load_lan_peers_sync');
  late final _wire_main_load_lan_peers_sync =
      _wire_main_load_lan_peers_syncPtr.asFunction<WireSyncReturn Function()>();

  void wire_main_load_recent_peers_for_ab(
    int port_,
    ffi.Pointer<wire_uint_8_list> filter,
  ) {
    return _wire_main_load_recent_peers_for_ab(
      port_,
      filter,
    );
  }

  late final _wire_main_load_recent_peers_for_abPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_main_load_recent_peers_for_ab');
  late final _wire_main_load_recent_peers_for_ab =
      _wire_main_load_recent_peers_for_abPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_load_fav_peers(
    int port_,
  ) {
    return _wire_main_load_fav_peers(
      port_,
    );
  }

  late final _wire_main_load_fav_peersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_load_fav_peers');
  late final _wire_main_load_fav_peers =
      _wire_main_load_fav_peersPtr.asFunction<void Function(int)>();

  void wire_main_load_lan_peers(
    int port_,
  ) {
    return _wire_main_load_lan_peers(
      port_,
    );
  }

  late final _wire_main_load_lan_peersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_load_lan_peers');
  late final _wire_main_load_lan_peers =
      _wire_main_load_lan_peersPtr.asFunction<void Function(int)>();

  void wire_main_remove_discovered(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_main_remove_discovered(
      port_,
      id,
    );
  }

  late final _wire_main_remove_discoveredPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_remove_discovered');
  late final _wire_main_remove_discovered = _wire_main_remove_discoveredPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_change_theme(
    int port_,
    ffi.Pointer<wire_uint_8_list> dark,
  ) {
    return _wire_main_change_theme(
      port_,
      dark,
    );
  }

  late final _wire_main_change_themePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_change_theme');
  late final _wire_main_change_theme = _wire_main_change_themePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_change_language(
    int port_,
    ffi.Pointer<wire_uint_8_list> lang,
  ) {
    return _wire_main_change_language(
      port_,
      lang,
    );
  }

  late final _wire_main_change_languagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_change_language');
  late final _wire_main_change_language = _wire_main_change_languagePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_video_save_directory(
    bool root,
  ) {
    return _wire_main_video_save_directory(
      root,
    );
  }

  late final _wire_main_video_save_directoryPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Bool)>>(
          'wire_main_video_save_directory');
  late final _wire_main_video_save_directory =
      _wire_main_video_save_directoryPtr
          .asFunction<WireSyncReturn Function(bool)>();

  void wire_main_set_user_default_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_main_set_user_default_option(
      port_,
      key,
      value,
    );
  }

  late final _wire_main_set_user_default_optionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_main_set_user_default_option');
  late final _wire_main_set_user_default_option =
      _wire_main_set_user_default_optionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_get_user_default_option(
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_main_get_user_default_option(
      key,
    );
  }

  late final _wire_main_get_user_default_optionPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>(
      'wire_main_get_user_default_option');
  late final _wire_main_get_user_default_option =
      _wire_main_get_user_default_optionPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_handle_relay_id(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_main_handle_relay_id(
      port_,
      id,
    );
  }

  late final _wire_main_handle_relay_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_handle_relay_id');
  late final _wire_main_handle_relay_id = _wire_main_handle_relay_idPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_is_option_fixed(
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_main_is_option_fixed(
      key,
    );
  }

  late final _wire_main_is_option_fixedPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_is_option_fixed');
  late final _wire_main_is_option_fixed = _wire_main_is_option_fixedPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_get_main_display() {
    return _wire_main_get_main_display();
  }

  late final _wire_main_get_main_displayPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_get_main_display');
  late final _wire_main_get_main_display =
      _wire_main_get_main_displayPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_get_displays() {
    return _wire_main_get_displays();
  }

  late final _wire_main_get_displaysPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_get_displays');
  late final _wire_main_get_displays =
      _wire_main_get_displaysPtr.asFunction<WireSyncReturn Function()>();

  void wire_session_add_port_forward(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int local_port,
    ffi.Pointer<wire_uint_8_list> remote_host,
    int remote_port,
  ) {
    return _wire_session_add_port_forward(
      port_,
      session_id,
      local_port,
      remote_host,
      remote_port,
    );
  }

  late final _wire_session_add_port_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_session_add_port_forward');
  late final _wire_session_add_port_forward =
      _wire_session_add_port_forwardPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int,
              ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_session_remove_port_forward(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int local_port,
  ) {
    return _wire_session_remove_port_forward(
      port_,
      session_id,
      local_port,
    );
  }

  late final _wire_session_remove_port_forwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_session_remove_port_forward');
  late final _wire_session_remove_port_forward =
      _wire_session_remove_port_forwardPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_session_new_rdp(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_new_rdp(
      port_,
      session_id,
    );
  }

  late final _wire_session_new_rdpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_new_rdp');
  late final _wire_session_new_rdp = _wire_session_new_rdpPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_request_voice_call(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_request_voice_call(
      port_,
      session_id,
    );
  }

  late final _wire_session_request_voice_callPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_request_voice_call');
  late final _wire_session_request_voice_call =
      _wire_session_request_voice_callPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_close_voice_call(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_close_voice_call(
      port_,
      session_id,
    );
  }

  late final _wire_session_close_voice_callPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_close_voice_call');
  late final _wire_session_close_voice_call = _wire_session_close_voice_callPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_cm_handle_incoming_voice_call(
    int port_,
    int id,
    bool accept,
  ) {
    return _wire_cm_handle_incoming_voice_call(
      port_,
      id,
      accept,
    );
  }

  late final _wire_cm_handle_incoming_voice_callPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Bool)>>(
      'wire_cm_handle_incoming_voice_call');
  late final _wire_cm_handle_incoming_voice_call =
      _wire_cm_handle_incoming_voice_callPtr
          .asFunction<void Function(int, int, bool)>();

  void wire_cm_close_voice_call(
    int port_,
    int id,
  ) {
    return _wire_cm_close_voice_call(
      port_,
      id,
    );
  }

  late final _wire_cm_close_voice_callPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_cm_close_voice_call');
  late final _wire_cm_close_voice_call =
      _wire_cm_close_voice_callPtr.asFunction<void Function(int, int)>();

  void wire_set_voice_call_input_device(
    int port_,
    bool _is_cm,
    ffi.Pointer<wire_uint_8_list> _device,
  ) {
    return _wire_set_voice_call_input_device(
      port_,
      _is_cm,
      _device,
    );
  }

  late final _wire_set_voice_call_input_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Bool, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_set_voice_call_input_device');
  late final _wire_set_voice_call_input_device =
      _wire_set_voice_call_input_devicePtr.asFunction<
          void Function(int, bool, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_voice_call_input_device(
    int port_,
    bool _is_cm,
  ) {
    return _wire_get_voice_call_input_device(
      port_,
      _is_cm,
    );
  }

  late final _wire_get_voice_call_input_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_get_voice_call_input_device');
  late final _wire_get_voice_call_input_device =
      _wire_get_voice_call_input_devicePtr
          .asFunction<void Function(int, bool)>();

  void wire_main_get_last_remote_id(
    int port_,
  ) {
    return _wire_main_get_last_remote_id(
      port_,
    );
  }

  late final _wire_main_get_last_remote_idPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_last_remote_id');
  late final _wire_main_get_last_remote_id =
      _wire_main_get_last_remote_idPtr.asFunction<void Function(int)>();

  void wire_main_get_software_update_url(
    int port_,
  ) {
    return _wire_main_get_software_update_url(
      port_,
    );
  }

  late final _wire_main_get_software_update_urlPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_software_update_url');
  late final _wire_main_get_software_update_url =
      _wire_main_get_software_update_urlPtr.asFunction<void Function(int)>();

  void wire_main_get_home_dir(
    int port_,
  ) {
    return _wire_main_get_home_dir(
      port_,
    );
  }

  late final _wire_main_get_home_dirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_home_dir');
  late final _wire_main_get_home_dir =
      _wire_main_get_home_dirPtr.asFunction<void Function(int)>();

  void wire_main_get_langs(
    int port_,
  ) {
    return _wire_main_get_langs(
      port_,
    );
  }

  late final _wire_main_get_langsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_langs');
  late final _wire_main_get_langs =
      _wire_main_get_langsPtr.asFunction<void Function(int)>();

  void wire_main_get_temporary_password(
    int port_,
  ) {
    return _wire_main_get_temporary_password(
      port_,
    );
  }

  late final _wire_main_get_temporary_passwordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_temporary_password');
  late final _wire_main_get_temporary_password =
      _wire_main_get_temporary_passwordPtr.asFunction<void Function(int)>();

  void wire_main_get_permanent_password(
    int port_,
  ) {
    return _wire_main_get_permanent_password(
      port_,
    );
  }

  late final _wire_main_get_permanent_passwordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_permanent_password');
  late final _wire_main_get_permanent_password =
      _wire_main_get_permanent_passwordPtr.asFunction<void Function(int)>();

  void wire_main_get_fingerprint(
    int port_,
  ) {
    return _wire_main_get_fingerprint(
      port_,
    );
  }

  late final _wire_main_get_fingerprintPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_fingerprint');
  late final _wire_main_get_fingerprint =
      _wire_main_get_fingerprintPtr.asFunction<void Function(int)>();

  void wire_cm_get_clients_state(
    int port_,
  ) {
    return _wire_cm_get_clients_state(
      port_,
    );
  }

  late final _wire_cm_get_clients_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_cm_get_clients_state');
  late final _wire_cm_get_clients_state =
      _wire_cm_get_clients_statePtr.asFunction<void Function(int)>();

  void wire_cm_check_clients_length(
    int port_,
    int length,
  ) {
    return _wire_cm_check_clients_length(
      port_,
      length,
    );
  }

  late final _wire_cm_check_clients_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>(
          'wire_cm_check_clients_length');
  late final _wire_cm_check_clients_length =
      _wire_cm_check_clients_lengthPtr.asFunction<void Function(int, int)>();

  void wire_cm_get_clients_length(
    int port_,
  ) {
    return _wire_cm_get_clients_length(
      port_,
    );
  }

  late final _wire_cm_get_clients_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_cm_get_clients_length');
  late final _wire_cm_get_clients_length =
      _wire_cm_get_clients_lengthPtr.asFunction<void Function(int)>();

  void wire_main_init(
    int port_,
    ffi.Pointer<wire_uint_8_list> app_dir,
    ffi.Pointer<wire_uint_8_list> custom_client_config,
  ) {
    return _wire_main_init(
      port_,
      app_dir,
      custom_client_config,
    );
  }

  late final _wire_main_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_init');
  late final _wire_main_init = _wire_main_initPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_device_id(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_main_device_id(
      port_,
      id,
    );
  }

  late final _wire_main_device_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_device_id');
  late final _wire_main_device_id = _wire_main_device_idPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_device_name(
    int port_,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_main_device_name(
      port_,
      name,
    );
  }

  late final _wire_main_device_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_device_name');
  late final _wire_main_device_name = _wire_main_device_namePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_remove_peer(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_main_remove_peer(
      port_,
      id,
    );
  }

  late final _wire_main_remove_peerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_remove_peer');
  late final _wire_main_remove_peer = _wire_main_remove_peerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_has_hwcodec() {
    return _wire_main_has_hwcodec();
  }

  late final _wire_main_has_hwcodecPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_has_hwcodec');
  late final _wire_main_has_hwcodec =
      _wire_main_has_hwcodecPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_has_vram() {
    return _wire_main_has_vram();
  }

  late final _wire_main_has_vramPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_has_vram');
  late final _wire_main_has_vram =
      _wire_main_has_vramPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_supported_hwdecodings() {
    return _wire_main_supported_hwdecodings();
  }

  late final _wire_main_supported_hwdecodingsPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_supported_hwdecodings');
  late final _wire_main_supported_hwdecodings =
      _wire_main_supported_hwdecodingsPtr
          .asFunction<WireSyncReturn Function()>();

  void wire_main_is_root(
    int port_,
  ) {
    return _wire_main_is_root(
      port_,
    );
  }

  late final _wire_main_is_rootPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_is_root');
  late final _wire_main_is_root =
      _wire_main_is_rootPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_get_double_click_time() {
    return _wire_get_double_click_time();
  }

  late final _wire_get_double_click_timePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_get_double_click_time');
  late final _wire_get_double_click_time =
      _wire_get_double_click_timePtr.asFunction<WireSyncReturn Function()>();

  void wire_main_start_dbus_server(
    int port_,
  ) {
    return _wire_main_start_dbus_server(
      port_,
    );
  }

  late final _wire_main_start_dbus_serverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_start_dbus_server');
  late final _wire_main_start_dbus_server =
      _wire_main_start_dbus_serverPtr.asFunction<void Function(int)>();

  void wire_main_save_ab(
    int port_,
    ffi.Pointer<wire_uint_8_list> json,
  ) {
    return _wire_main_save_ab(
      port_,
      json,
    );
  }

  late final _wire_main_save_abPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_main_save_ab');
  late final _wire_main_save_ab = _wire_main_save_abPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_clear_ab(
    int port_,
  ) {
    return _wire_main_clear_ab(
      port_,
    );
  }

  late final _wire_main_clear_abPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_clear_ab');
  late final _wire_main_clear_ab =
      _wire_main_clear_abPtr.asFunction<void Function(int)>();

  void wire_main_load_ab(
    int port_,
  ) {
    return _wire_main_load_ab(
      port_,
    );
  }

  late final _wire_main_load_abPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_load_ab');
  late final _wire_main_load_ab =
      _wire_main_load_abPtr.asFunction<void Function(int)>();

  void wire_main_save_group(
    int port_,
    ffi.Pointer<wire_uint_8_list> json,
  ) {
    return _wire_main_save_group(
      port_,
      json,
    );
  }

  late final _wire_main_save_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_save_group');
  late final _wire_main_save_group = _wire_main_save_groupPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_clear_group(
    int port_,
  ) {
    return _wire_main_clear_group(
      port_,
    );
  }

  late final _wire_main_clear_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_clear_group');
  late final _wire_main_clear_group =
      _wire_main_clear_groupPtr.asFunction<void Function(int)>();

  void wire_main_load_group(
    int port_,
  ) {
    return _wire_main_load_group(
      port_,
    );
  }

  late final _wire_main_load_groupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_load_group');
  late final _wire_main_load_group =
      _wire_main_load_groupPtr.asFunction<void Function(int)>();

  void wire_session_send_pointer(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_session_send_pointer(
      port_,
      session_id,
      msg,
    );
  }

  late final _wire_session_send_pointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_send_pointer');
  late final _wire_session_send_pointer =
      _wire_session_send_pointerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_send_mouse(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_session_send_mouse(
      port_,
      session_id,
      msg,
    );
  }

  late final _wire_session_send_mousePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_send_mouse');
  late final _wire_session_send_mouse = _wire_session_send_mousePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_restart_remote_device(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_restart_remote_device(
      port_,
      session_id,
    );
  }

  late final _wire_session_restart_remote_devicePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_restart_remote_device');
  late final _wire_session_restart_remote_device =
      _wire_session_restart_remote_devicePtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_session_get_audit_server_sync(
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> typ,
  ) {
    return _wire_session_get_audit_server_sync(
      session_id,
      typ,
    );
  }

  late final _wire_session_get_audit_server_syncPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_get_audit_server_sync');
  late final _wire_session_get_audit_server_sync =
      _wire_session_get_audit_server_syncPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_send_note(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    ffi.Pointer<wire_uint_8_list> note,
  ) {
    return _wire_session_send_note(
      port_,
      session_id,
      note,
    );
  }

  late final _wire_session_send_notePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_session_send_note');
  late final _wire_session_send_note = _wire_session_send_notePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_alternative_codecs(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_alternative_codecs(
      port_,
      session_id,
    );
  }

  late final _wire_session_alternative_codecsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_alternative_codecs');
  late final _wire_session_alternative_codecs =
      _wire_session_alternative_codecsPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_change_prefer_codec(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_change_prefer_codec(
      port_,
      session_id,
    );
  }

  late final _wire_session_change_prefer_codecPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_change_prefer_codec');
  late final _wire_session_change_prefer_codec =
      _wire_session_change_prefer_codecPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_on_waiting_for_image_dialog_show(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_session_on_waiting_for_image_dialog_show(
      port_,
      session_id,
    );
  }

  late final _wire_session_on_waiting_for_image_dialog_showPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_session_on_waiting_for_image_dialog_show');
  late final _wire_session_on_waiting_for_image_dialog_show =
      _wire_session_on_waiting_for_image_dialog_showPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_session_toggle_virtual_display(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int index,
    bool on1,
  ) {
    return _wire_session_toggle_virtual_display(
      port_,
      session_id,
      index,
      on1,
    );
  }

  late final _wire_session_toggle_virtual_displayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Int32,
              ffi.Bool)>>('wire_session_toggle_virtual_display');
  late final _wire_session_toggle_virtual_display =
      _wire_session_toggle_virtual_displayPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>, int, bool)>();

  void wire_main_set_home_dir(
    int port_,
    ffi.Pointer<wire_uint_8_list> _home,
  ) {
    return _wire_main_set_home_dir(
      port_,
      _home,
    );
  }

  late final _wire_main_set_home_dirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_set_home_dir');
  late final _wire_main_set_home_dir = _wire_main_set_home_dirPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_get_data_dir_ios() {
    return _wire_main_get_data_dir_ios();
  }

  late final _wire_main_get_data_dir_iosPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_get_data_dir_ios');
  late final _wire_main_get_data_dir_ios =
      _wire_main_get_data_dir_iosPtr.asFunction<WireSyncReturn Function()>();

  void wire_main_stop_service(
    int port_,
  ) {
    return _wire_main_stop_service(
      port_,
    );
  }

  late final _wire_main_stop_servicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_stop_service');
  late final _wire_main_stop_service =
      _wire_main_stop_servicePtr.asFunction<void Function(int)>();

  void wire_main_start_service(
    int port_,
  ) {
    return _wire_main_start_service(
      port_,
    );
  }

  late final _wire_main_start_servicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_start_service');
  late final _wire_main_start_service =
      _wire_main_start_servicePtr.asFunction<void Function(int)>();

  void wire_main_update_temporary_password(
    int port_,
  ) {
    return _wire_main_update_temporary_password(
      port_,
    );
  }

  late final _wire_main_update_temporary_passwordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_update_temporary_password');
  late final _wire_main_update_temporary_password =
      _wire_main_update_temporary_passwordPtr.asFunction<void Function(int)>();

  void wire_main_set_permanent_password(
    int port_,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_main_set_permanent_password(
      port_,
      password,
    );
  }

  late final _wire_main_set_permanent_passwordPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_main_set_permanent_password');
  late final _wire_main_set_permanent_password =
      _wire_main_set_permanent_passwordPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_check_super_user_permission(
    int port_,
  ) {
    return _wire_main_check_super_user_permission(
      port_,
    );
  }

  late final _wire_main_check_super_user_permissionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_check_super_user_permission');
  late final _wire_main_check_super_user_permission =
      _wire_main_check_super_user_permissionPtr
          .asFunction<void Function(int)>();

  WireSyncReturn wire_main_get_unlock_pin() {
    return _wire_main_get_unlock_pin();
  }

  late final _wire_main_get_unlock_pinPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_get_unlock_pin');
  late final _wire_main_get_unlock_pin =
      _wire_main_get_unlock_pinPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_set_unlock_pin(
    ffi.Pointer<wire_uint_8_list> pin,
  ) {
    return _wire_main_set_unlock_pin(
      pin,
    );
  }

  late final _wire_main_set_unlock_pinPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_set_unlock_pin');
  late final _wire_main_set_unlock_pin = _wire_main_set_unlock_pinPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_check_mouse_time(
    int port_,
  ) {
    return _wire_main_check_mouse_time(
      port_,
    );
  }

  late final _wire_main_check_mouse_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_check_mouse_time');
  late final _wire_main_check_mouse_time =
      _wire_main_check_mouse_timePtr.asFunction<void Function(int)>();

  void wire_main_get_mouse_time(
    int port_,
  ) {
    return _wire_main_get_mouse_time(
      port_,
    );
  }

  late final _wire_main_get_mouse_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_mouse_time');
  late final _wire_main_get_mouse_time =
      _wire_main_get_mouse_timePtr.asFunction<void Function(int)>();

  void wire_main_wol(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_main_wol(
      port_,
      id,
    );
  }

  late final _wire_main_wolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_main_wol');
  late final _wire_main_wol = _wire_main_wolPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_create_shortcut(
    int port_,
    ffi.Pointer<wire_uint_8_list> _id,
  ) {
    return _wire_main_create_shortcut(
      port_,
      _id,
    );
  }

  late final _wire_main_create_shortcutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_create_shortcut');
  late final _wire_main_create_shortcut = _wire_main_create_shortcutPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_cm_send_chat(
    int port_,
    int conn_id,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_cm_send_chat(
      port_,
      conn_id,
      msg,
    );
  }

  late final _wire_cm_send_chatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_cm_send_chat');
  late final _wire_cm_send_chat = _wire_cm_send_chatPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_cm_login_res(
    int port_,
    int conn_id,
    bool res,
  ) {
    return _wire_cm_login_res(
      port_,
      conn_id,
      res,
    );
  }

  late final _wire_cm_login_resPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Bool)>>(
      'wire_cm_login_res');
  late final _wire_cm_login_res =
      _wire_cm_login_resPtr.asFunction<void Function(int, int, bool)>();

  void wire_cm_close_connection(
    int port_,
    int conn_id,
  ) {
    return _wire_cm_close_connection(
      port_,
      conn_id,
    );
  }

  late final _wire_cm_close_connectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_cm_close_connection');
  late final _wire_cm_close_connection =
      _wire_cm_close_connectionPtr.asFunction<void Function(int, int)>();

  void wire_cm_remove_disconnected_connection(
    int port_,
    int conn_id,
  ) {
    return _wire_cm_remove_disconnected_connection(
      port_,
      conn_id,
    );
  }

  late final _wire_cm_remove_disconnected_connectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_cm_remove_disconnected_connection');
  late final _wire_cm_remove_disconnected_connection =
      _wire_cm_remove_disconnected_connectionPtr
          .asFunction<void Function(int, int)>();

  void wire_cm_check_click_time(
    int port_,
    int conn_id,
  ) {
    return _wire_cm_check_click_time(
      port_,
      conn_id,
    );
  }

  late final _wire_cm_check_click_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_cm_check_click_time');
  late final _wire_cm_check_click_time =
      _wire_cm_check_click_timePtr.asFunction<void Function(int, int)>();

  void wire_cm_get_click_time(
    int port_,
  ) {
    return _wire_cm_get_click_time(
      port_,
    );
  }

  late final _wire_cm_get_click_timePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_cm_get_click_time');
  late final _wire_cm_get_click_time =
      _wire_cm_get_click_timePtr.asFunction<void Function(int)>();

  void wire_cm_switch_permission(
    int port_,
    int conn_id,
    ffi.Pointer<wire_uint_8_list> name,
    bool enabled,
  ) {
    return _wire_cm_switch_permission(
      port_,
      conn_id,
      name,
      enabled,
    );
  }

  late final _wire_cm_switch_permissionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_cm_switch_permission');
  late final _wire_cm_switch_permission =
      _wire_cm_switch_permissionPtr.asFunction<
          void Function(int, int, ffi.Pointer<wire_uint_8_list>, bool)>();

  WireSyncReturn wire_cm_can_elevate() {
    return _wire_cm_can_elevate();
  }

  late final _wire_cm_can_elevatePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_cm_can_elevate');
  late final _wire_cm_can_elevate =
      _wire_cm_can_elevatePtr.asFunction<WireSyncReturn Function()>();

  void wire_cm_elevate_portable(
    int port_,
    int conn_id,
  ) {
    return _wire_cm_elevate_portable(
      port_,
      conn_id,
    );
  }

  late final _wire_cm_elevate_portablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_cm_elevate_portable');
  late final _wire_cm_elevate_portable =
      _wire_cm_elevate_portablePtr.asFunction<void Function(int, int)>();

  void wire_cm_switch_back(
    int port_,
    int conn_id,
  ) {
    return _wire_cm_switch_back(
      port_,
      conn_id,
    );
  }

  late final _wire_cm_switch_backPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_cm_switch_back');
  late final _wire_cm_switch_back =
      _wire_cm_switch_backPtr.asFunction<void Function(int, int)>();

  void wire_cm_get_config(
    int port_,
    ffi.Pointer<wire_uint_8_list> name,
  ) {
    return _wire_cm_get_config(
      port_,
      name,
    );
  }

  late final _wire_cm_get_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_cm_get_config');
  late final _wire_cm_get_config = _wire_cm_get_configPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_get_build_date(
    int port_,
  ) {
    return _wire_main_get_build_date(
      port_,
    );
  }

  late final _wire_main_get_build_datePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_build_date');
  late final _wire_main_get_build_date =
      _wire_main_get_build_datePtr.asFunction<void Function(int)>();

  WireSyncReturn wire_translate(
    ffi.Pointer<wire_uint_8_list> name,
    ffi.Pointer<wire_uint_8_list> locale,
  ) {
    return _wire_translate(
      name,
      locale,
    );
  }

  late final _wire_translatePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_translate');
  late final _wire_translate = _wire_translatePtr.asFunction<
      WireSyncReturn Function(
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_session_get_rgba_size(
    ffi.Pointer<wire_uint_8_list> session_id,
    int display,
  ) {
    return _wire_session_get_rgba_size(
      session_id,
      display,
    );
  }

  late final _wire_session_get_rgba_sizePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.UintPtr)>>('wire_session_get_rgba_size');
  late final _wire_session_get_rgba_size =
      _wire_session_get_rgba_sizePtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>, int)>();

  WireSyncReturn wire_session_next_rgba(
    ffi.Pointer<wire_uint_8_list> session_id,
    int display,
  ) {
    return _wire_session_next_rgba(
      session_id,
      display,
    );
  }

  late final _wire_session_next_rgbaPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.UintPtr)>>('wire_session_next_rgba');
  late final _wire_session_next_rgba = _wire_session_next_rgbaPtr.asFunction<
      WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>, int)>();

  WireSyncReturn wire_session_register_pixelbuffer_texture(
    ffi.Pointer<wire_uint_8_list> session_id,
    int display,
    int ptr,
  ) {
    return _wire_session_register_pixelbuffer_texture(
      session_id,
      display,
      ptr,
    );
  }

  late final _wire_session_register_pixelbuffer_texturePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>, ffi.UintPtr,
              ffi.UintPtr)>>('wire_session_register_pixelbuffer_texture');
  late final _wire_session_register_pixelbuffer_texture =
      _wire_session_register_pixelbuffer_texturePtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>, int, int)>();

  WireSyncReturn wire_session_register_gpu_texture(
    ffi.Pointer<wire_uint_8_list> session_id,
    int display,
    int ptr,
  ) {
    return _wire_session_register_gpu_texture(
      session_id,
      display,
      ptr,
    );
  }

  late final _wire_session_register_gpu_texturePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>, ffi.UintPtr,
              ffi.UintPtr)>>('wire_session_register_gpu_texture');
  late final _wire_session_register_gpu_texture =
      _wire_session_register_gpu_texturePtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>, int, int)>();

  void wire_query_onlines(
    int port_,
    ffi.Pointer<wire_StringList> ids,
  ) {
    return _wire_query_onlines(
      port_,
      ids,
    );
  }

  late final _wire_query_onlinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_StringList>)>>('wire_query_onlines');
  late final _wire_query_onlines = _wire_query_onlinesPtr
      .asFunction<void Function(int, ffi.Pointer<wire_StringList>)>();

  WireSyncReturn wire_version_to_number(
    ffi.Pointer<wire_uint_8_list> v,
  ) {
    return _wire_version_to_number(
      v,
    );
  }

  late final _wire_version_to_numberPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_version_to_number');
  late final _wire_version_to_number = _wire_version_to_numberPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_option_synced(
    int port_,
  ) {
    return _wire_option_synced(
      port_,
    );
  }

  late final _wire_option_syncedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_option_synced');
  late final _wire_option_synced =
      _wire_option_syncedPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_main_is_installed() {
    return _wire_main_is_installed();
  }

  late final _wire_main_is_installedPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_is_installed');
  late final _wire_main_is_installed =
      _wire_main_is_installedPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_init_input_source() {
    return _wire_main_init_input_source();
  }

  late final _wire_main_init_input_sourcePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_init_input_source');
  late final _wire_main_init_input_source =
      _wire_main_init_input_sourcePtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_is_installed_lower_version() {
    return _wire_main_is_installed_lower_version();
  }

  late final _wire_main_is_installed_lower_versionPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_is_installed_lower_version');
  late final _wire_main_is_installed_lower_version =
      _wire_main_is_installed_lower_versionPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_is_installed_daemon(
    bool prompt,
  ) {
    return _wire_main_is_installed_daemon(
      prompt,
    );
  }

  late final _wire_main_is_installed_daemonPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Bool)>>(
          'wire_main_is_installed_daemon');
  late final _wire_main_is_installed_daemon = _wire_main_is_installed_daemonPtr
      .asFunction<WireSyncReturn Function(bool)>();

  WireSyncReturn wire_main_is_process_trusted(
    bool prompt,
  ) {
    return _wire_main_is_process_trusted(
      prompt,
    );
  }

  late final _wire_main_is_process_trustedPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Bool)>>(
          'wire_main_is_process_trusted');
  late final _wire_main_is_process_trusted = _wire_main_is_process_trustedPtr
      .asFunction<WireSyncReturn Function(bool)>();

  WireSyncReturn wire_main_is_can_screen_recording(
    bool prompt,
  ) {
    return _wire_main_is_can_screen_recording(
      prompt,
    );
  }

  late final _wire_main_is_can_screen_recordingPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Bool)>>(
          'wire_main_is_can_screen_recording');
  late final _wire_main_is_can_screen_recording =
      _wire_main_is_can_screen_recordingPtr
          .asFunction<WireSyncReturn Function(bool)>();

  WireSyncReturn wire_main_is_can_input_monitoring(
    bool prompt,
  ) {
    return _wire_main_is_can_input_monitoring(
      prompt,
    );
  }

  late final _wire_main_is_can_input_monitoringPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function(ffi.Bool)>>(
          'wire_main_is_can_input_monitoring');
  late final _wire_main_is_can_input_monitoring =
      _wire_main_is_can_input_monitoringPtr
          .asFunction<WireSyncReturn Function(bool)>();

  WireSyncReturn wire_main_is_share_rdp() {
    return _wire_main_is_share_rdp();
  }

  late final _wire_main_is_share_rdpPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_is_share_rdp');
  late final _wire_main_is_share_rdp =
      _wire_main_is_share_rdpPtr.asFunction<WireSyncReturn Function()>();

  void wire_main_set_share_rdp(
    int port_,
    bool enable,
  ) {
    return _wire_main_set_share_rdp(
      port_,
      enable,
    );
  }

  late final _wire_main_set_share_rdpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_main_set_share_rdp');
  late final _wire_main_set_share_rdp =
      _wire_main_set_share_rdpPtr.asFunction<void Function(int, bool)>();

  WireSyncReturn wire_main_goto_install() {
    return _wire_main_goto_install();
  }

  late final _wire_main_goto_installPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_goto_install');
  late final _wire_main_goto_install =
      _wire_main_goto_installPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_get_new_version() {
    return _wire_main_get_new_version();
  }

  late final _wire_main_get_new_versionPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_get_new_version');
  late final _wire_main_get_new_version =
      _wire_main_get_new_versionPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_update_me() {
    return _wire_main_update_me();
  }

  late final _wire_main_update_mePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_update_me');
  late final _wire_main_update_me =
      _wire_main_update_mePtr.asFunction<WireSyncReturn Function()>();

  void wire_set_cur_session_id(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
  ) {
    return _wire_set_cur_session_id(
      port_,
      session_id,
    );
  }

  late final _wire_set_cur_session_idPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set_cur_session_id');
  late final _wire_set_cur_session_id = _wire_set_cur_session_idPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_install_show_run_without_install() {
    return _wire_install_show_run_without_install();
  }

  late final _wire_install_show_run_without_installPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_install_show_run_without_install');
  late final _wire_install_show_run_without_install =
      _wire_install_show_run_without_installPtr
          .asFunction<WireSyncReturn Function()>();

  void wire_install_run_without_install(
    int port_,
  ) {
    return _wire_install_run_without_install(
      port_,
    );
  }

  late final _wire_install_run_without_installPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_install_run_without_install');
  late final _wire_install_run_without_install =
      _wire_install_run_without_installPtr.asFunction<void Function(int)>();

  void wire_install_install_me(
    int port_,
    ffi.Pointer<wire_uint_8_list> options,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_install_install_me(
      port_,
      options,
      path,
    );
  }

  late final _wire_install_install_mePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_install_install_me');
  late final _wire_install_install_me = _wire_install_install_mePtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_install_install_path() {
    return _wire_install_install_path();
  }

  late final _wire_install_install_pathPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_install_install_path');
  late final _wire_install_install_path =
      _wire_install_install_pathPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_install_install_options() {
    return _wire_install_install_options();
  }

  late final _wire_install_install_optionsPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_install_install_options');
  late final _wire_install_install_options =
      _wire_install_install_optionsPtr.asFunction<WireSyncReturn Function()>();

  void wire_main_account_auth(
    int port_,
    ffi.Pointer<wire_uint_8_list> op,
    bool remember_me,
  ) {
    return _wire_main_account_auth(
      port_,
      op,
      remember_me,
    );
  }

  late final _wire_main_account_authPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_main_account_auth');
  late final _wire_main_account_auth = _wire_main_account_authPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_main_account_auth_cancel(
    int port_,
  ) {
    return _wire_main_account_auth_cancel(
      port_,
    );
  }

  late final _wire_main_account_auth_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_account_auth_cancel');
  late final _wire_main_account_auth_cancel =
      _wire_main_account_auth_cancelPtr.asFunction<void Function(int)>();

  void wire_main_account_auth_result(
    int port_,
  ) {
    return _wire_main_account_auth_result(
      port_,
    );
  }

  late final _wire_main_account_auth_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_account_auth_result');
  late final _wire_main_account_auth_result =
      _wire_main_account_auth_resultPtr.asFunction<void Function(int)>();

  void wire_main_on_main_window_close(
    int port_,
  ) {
    return _wire_main_on_main_window_close(
      port_,
    );
  }

  late final _wire_main_on_main_window_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_on_main_window_close');
  late final _wire_main_on_main_window_close =
      _wire_main_on_main_window_closePtr.asFunction<void Function(int)>();

  WireSyncReturn wire_main_current_is_wayland() {
    return _wire_main_current_is_wayland();
  }

  late final _wire_main_current_is_waylandPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_current_is_wayland');
  late final _wire_main_current_is_wayland =
      _wire_main_current_is_waylandPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_is_login_wayland() {
    return _wire_main_is_login_wayland();
  }

  late final _wire_main_is_login_waylandPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_is_login_wayland');
  late final _wire_main_is_login_wayland =
      _wire_main_is_login_waylandPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_hide_dock() {
    return _wire_main_hide_dock();
  }

  late final _wire_main_hide_dockPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_hide_dock');
  late final _wire_main_hide_dock =
      _wire_main_hide_dockPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_has_file_clipboard() {
    return _wire_main_has_file_clipboard();
  }

  late final _wire_main_has_file_clipboardPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_has_file_clipboard');
  late final _wire_main_has_file_clipboard =
      _wire_main_has_file_clipboardPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_has_gpu_texture_render() {
    return _wire_main_has_gpu_texture_render();
  }

  late final _wire_main_has_gpu_texture_renderPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_has_gpu_texture_render');
  late final _wire_main_has_gpu_texture_render =
      _wire_main_has_gpu_texture_renderPtr
          .asFunction<WireSyncReturn Function()>();

  void wire_cm_init(
    int port_,
  ) {
    return _wire_cm_init(
      port_,
    );
  }

  late final _wire_cm_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_cm_init');
  late final _wire_cm_init = _wire_cm_initPtr.asFunction<void Function(int)>();

  void wire_main_start_ipc_url_server(
    int port_,
  ) {
    return _wire_main_start_ipc_url_server(
      port_,
    );
  }

  late final _wire_main_start_ipc_url_serverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_start_ipc_url_server');
  late final _wire_main_start_ipc_url_server =
      _wire_main_start_ipc_url_serverPtr.asFunction<void Function(int)>();

  void wire_main_test_wallpaper(
    int port_,
    int _second,
  ) {
    return _wire_main_test_wallpaper(
      port_,
      _second,
    );
  }

  late final _wire_main_test_wallpaperPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>(
          'wire_main_test_wallpaper');
  late final _wire_main_test_wallpaper =
      _wire_main_test_wallpaperPtr.asFunction<void Function(int, int)>();

  void wire_main_support_remove_wallpaper(
    int port_,
  ) {
    return _wire_main_support_remove_wallpaper(
      port_,
    );
  }

  late final _wire_main_support_remove_wallpaperPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_support_remove_wallpaper');
  late final _wire_main_support_remove_wallpaper =
      _wire_main_support_remove_wallpaperPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_is_incoming_only() {
    return _wire_is_incoming_only();
  }

  late final _wire_is_incoming_onlyPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_is_incoming_only');
  late final _wire_is_incoming_only =
      _wire_is_incoming_onlyPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_is_outgoing_only() {
    return _wire_is_outgoing_only();
  }

  late final _wire_is_outgoing_onlyPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_is_outgoing_only');
  late final _wire_is_outgoing_only =
      _wire_is_outgoing_onlyPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_is_custom_client() {
    return _wire_is_custom_client();
  }

  late final _wire_is_custom_clientPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_is_custom_client');
  late final _wire_is_custom_client =
      _wire_is_custom_clientPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_is_disable_settings() {
    return _wire_is_disable_settings();
  }

  late final _wire_is_disable_settingsPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_is_disable_settings');
  late final _wire_is_disable_settings =
      _wire_is_disable_settingsPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_is_disable_ab() {
    return _wire_is_disable_ab();
  }

  late final _wire_is_disable_abPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_is_disable_ab');
  late final _wire_is_disable_ab =
      _wire_is_disable_abPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_is_disable_account() {
    return _wire_is_disable_account();
  }

  late final _wire_is_disable_accountPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_is_disable_account');
  late final _wire_is_disable_account =
      _wire_is_disable_accountPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_is_disable_group_panel() {
    return _wire_is_disable_group_panel();
  }

  late final _wire_is_disable_group_panelPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_is_disable_group_panel');
  late final _wire_is_disable_group_panel =
      _wire_is_disable_group_panelPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_is_disable_installation() {
    return _wire_is_disable_installation();
  }

  late final _wire_is_disable_installationPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_is_disable_installation');
  late final _wire_is_disable_installation =
      _wire_is_disable_installationPtr.asFunction<WireSyncReturn Function()>();

  void wire_is_preset_password(
    int port_,
  ) {
    return _wire_is_preset_password(
      port_,
    );
  }

  late final _wire_is_preset_passwordPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_is_preset_password');
  late final _wire_is_preset_password =
      _wire_is_preset_passwordPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_is_preset_password_mobile_only() {
    return _wire_is_preset_password_mobile_only();
  }

  late final _wire_is_preset_password_mobile_onlyPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_is_preset_password_mobile_only');
  late final _wire_is_preset_password_mobile_only =
      _wire_is_preset_password_mobile_onlyPtr
          .asFunction<WireSyncReturn Function()>();

  void wire_send_url_scheme(
    int port_,
    ffi.Pointer<wire_uint_8_list> _url,
  ) {
    return _wire_send_url_scheme(
      port_,
      _url,
    );
  }

  late final _wire_send_url_schemePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_send_url_scheme');
  late final _wire_send_url_scheme = _wire_send_url_schemePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_plugin_event(
    int port_,
    ffi.Pointer<wire_uint_8_list> _id,
    ffi.Pointer<wire_uint_8_list> _peer,
    ffi.Pointer<wire_uint_8_list> _event,
  ) {
    return _wire_plugin_event(
      port_,
      _id,
      _peer,
      _event,
    );
  }

  late final _wire_plugin_eventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_plugin_event');
  late final _wire_plugin_event = _wire_plugin_eventPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_plugin_register_event_stream(
    int port_,
    ffi.Pointer<wire_uint_8_list> _id,
  ) {
    return _wire_plugin_register_event_stream(
      port_,
      _id,
    );
  }

  late final _wire_plugin_register_event_streamPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_plugin_register_event_stream');
  late final _wire_plugin_register_event_stream =
      _wire_plugin_register_event_streamPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_plugin_get_session_option(
    ffi.Pointer<wire_uint_8_list> _id,
    ffi.Pointer<wire_uint_8_list> _peer,
    ffi.Pointer<wire_uint_8_list> _key,
  ) {
    return _wire_plugin_get_session_option(
      _id,
      _peer,
      _key,
    );
  }

  late final _wire_plugin_get_session_optionPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_plugin_get_session_option');
  late final _wire_plugin_get_session_option =
      _wire_plugin_get_session_optionPtr.asFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_plugin_set_session_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> _id,
    ffi.Pointer<wire_uint_8_list> _peer,
    ffi.Pointer<wire_uint_8_list> _key,
    ffi.Pointer<wire_uint_8_list> _value,
  ) {
    return _wire_plugin_set_session_option(
      port_,
      _id,
      _peer,
      _key,
      _value,
    );
  }

  late final _wire_plugin_set_session_optionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_plugin_set_session_option');
  late final _wire_plugin_set_session_option =
      _wire_plugin_set_session_optionPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_plugin_get_shared_option(
    ffi.Pointer<wire_uint_8_list> _id,
    ffi.Pointer<wire_uint_8_list> _key,
  ) {
    return _wire_plugin_get_shared_option(
      _id,
      _key,
    );
  }

  late final _wire_plugin_get_shared_optionPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_plugin_get_shared_option');
  late final _wire_plugin_get_shared_option =
      _wire_plugin_get_shared_optionPtr.asFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_plugin_set_shared_option(
    int port_,
    ffi.Pointer<wire_uint_8_list> _id,
    ffi.Pointer<wire_uint_8_list> _key,
    ffi.Pointer<wire_uint_8_list> _value,
  ) {
    return _wire_plugin_set_shared_option(
      port_,
      _id,
      _key,
      _value,
    );
  }

  late final _wire_plugin_set_shared_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_plugin_set_shared_option');
  late final _wire_plugin_set_shared_option =
      _wire_plugin_set_shared_optionPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_plugin_reload(
    int port_,
    ffi.Pointer<wire_uint_8_list> _id,
  ) {
    return _wire_plugin_reload(
      port_,
      _id,
    );
  }

  late final _wire_plugin_reloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_plugin_reload');
  late final _wire_plugin_reload = _wire_plugin_reloadPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_plugin_enable(
    ffi.Pointer<wire_uint_8_list> _id,
    bool _v,
  ) {
    return _wire_plugin_enable(
      _id,
      _v,
    );
  }

  late final _wire_plugin_enablePtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>, ffi.Bool)>>('wire_plugin_enable');
  late final _wire_plugin_enable = _wire_plugin_enablePtr.asFunction<
      WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>, bool)>();

  WireSyncReturn wire_plugin_is_enabled(
    ffi.Pointer<wire_uint_8_list> _id,
  ) {
    return _wire_plugin_is_enabled(
      _id,
    );
  }

  late final _wire_plugin_is_enabledPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_plugin_is_enabled');
  late final _wire_plugin_is_enabled = _wire_plugin_is_enabledPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_plugin_feature_is_enabled() {
    return _wire_plugin_feature_is_enabled();
  }

  late final _wire_plugin_feature_is_enabledPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_plugin_feature_is_enabled');
  late final _wire_plugin_feature_is_enabled =
      _wire_plugin_feature_is_enabledPtr
          .asFunction<WireSyncReturn Function()>();

  void wire_plugin_sync_ui(
    int port_,
    ffi.Pointer<wire_uint_8_list> _sync_to,
  ) {
    return _wire_plugin_sync_ui(
      port_,
      _sync_to,
    );
  }

  late final _wire_plugin_sync_uiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_plugin_sync_ui');
  late final _wire_plugin_sync_ui = _wire_plugin_sync_uiPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_plugin_list_reload(
    int port_,
  ) {
    return _wire_plugin_list_reload(
      port_,
    );
  }

  late final _wire_plugin_list_reloadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_plugin_list_reload');
  late final _wire_plugin_list_reload =
      _wire_plugin_list_reloadPtr.asFunction<void Function(int)>();

  void wire_plugin_install(
    int port_,
    ffi.Pointer<wire_uint_8_list> _id,
    bool _b,
  ) {
    return _wire_plugin_install(
      port_,
      _id,
      _b,
    );
  }

  late final _wire_plugin_installPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_plugin_install');
  late final _wire_plugin_install = _wire_plugin_installPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, bool)>();

  WireSyncReturn wire_is_support_multi_ui_session(
    ffi.Pointer<wire_uint_8_list> version,
  ) {
    return _wire_is_support_multi_ui_session(
      version,
    );
  }

  late final _wire_is_support_multi_ui_sessionPtr = _lookup<
          ffi.NativeFunction<
              WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>>(
      'wire_is_support_multi_ui_session');
  late final _wire_is_support_multi_ui_session =
      _wire_is_support_multi_ui_sessionPtr
          .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_is_selinux_enforcing() {
    return _wire_is_selinux_enforcing();
  }

  late final _wire_is_selinux_enforcingPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_is_selinux_enforcing');
  late final _wire_is_selinux_enforcing =
      _wire_is_selinux_enforcingPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_default_privacy_mode_impl() {
    return _wire_main_default_privacy_mode_impl();
  }

  late final _wire_main_default_privacy_mode_implPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_default_privacy_mode_impl');
  late final _wire_main_default_privacy_mode_impl =
      _wire_main_default_privacy_mode_implPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_supported_privacy_mode_impls() {
    return _wire_main_supported_privacy_mode_impls();
  }

  late final _wire_main_supported_privacy_mode_implsPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_supported_privacy_mode_impls');
  late final _wire_main_supported_privacy_mode_impls =
      _wire_main_supported_privacy_mode_implsPtr
          .asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_supported_input_source() {
    return _wire_main_supported_input_source();
  }

  late final _wire_main_supported_input_sourcePtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_supported_input_source');
  late final _wire_main_supported_input_source =
      _wire_main_supported_input_sourcePtr
          .asFunction<WireSyncReturn Function()>();

  void wire_main_generate2fa(
    int port_,
  ) {
    return _wire_main_generate2fa(
      port_,
    );
  }

  late final _wire_main_generate2faPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_generate2fa');
  late final _wire_main_generate2fa =
      _wire_main_generate2faPtr.asFunction<void Function(int)>();

  void wire_main_verify2fa(
    int port_,
    ffi.Pointer<wire_uint_8_list> code,
  ) {
    return _wire_main_verify2fa(
      port_,
      code,
    );
  }

  late final _wire_main_verify2faPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_verify2fa');
  late final _wire_main_verify2fa = _wire_main_verify2faPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_has_valid_2fa_sync() {
    return _wire_main_has_valid_2fa_sync();
  }

  late final _wire_main_has_valid_2fa_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_has_valid_2fa_sync');
  late final _wire_main_has_valid_2fa_sync =
      _wire_main_has_valid_2fa_syncPtr.asFunction<WireSyncReturn Function()>();

  void wire_main_verify_bot(
    int port_,
    ffi.Pointer<wire_uint_8_list> token,
  ) {
    return _wire_main_verify_bot(
      port_,
      token,
    );
  }

  late final _wire_main_verify_botPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_verify_bot');
  late final _wire_main_verify_bot = _wire_main_verify_botPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_has_valid_bot_sync() {
    return _wire_main_has_valid_bot_sync();
  }

  late final _wire_main_has_valid_bot_syncPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_has_valid_bot_sync');
  late final _wire_main_has_valid_bot_sync =
      _wire_main_has_valid_bot_syncPtr.asFunction<WireSyncReturn Function()>();

  WireSyncReturn wire_main_get_hard_option(
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_main_get_hard_option(
      key,
    );
  }

  late final _wire_main_get_hard_optionPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_get_hard_option');
  late final _wire_main_get_hard_option = _wire_main_get_hard_optionPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  WireSyncReturn wire_main_get_buildin_option(
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_main_get_buildin_option(
      key,
    );
  }

  late final _wire_main_get_buildin_optionPtr = _lookup<
      ffi.NativeFunction<
          WireSyncReturn Function(
              ffi.Pointer<wire_uint_8_list>)>>('wire_main_get_buildin_option');
  late final _wire_main_get_buildin_option = _wire_main_get_buildin_optionPtr
      .asFunction<WireSyncReturn Function(ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_check_hwcodec(
    int port_,
  ) {
    return _wire_main_check_hwcodec(
      port_,
    );
  }

  late final _wire_main_check_hwcodecPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_check_hwcodec');
  late final _wire_main_check_hwcodec =
      _wire_main_check_hwcodecPtr.asFunction<void Function(int)>();

  void wire_main_get_trusted_devices(
    int port_,
  ) {
    return _wire_main_get_trusted_devices(
      port_,
    );
  }

  late final _wire_main_get_trusted_devicesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_get_trusted_devices');
  late final _wire_main_get_trusted_devices =
      _wire_main_get_trusted_devicesPtr.asFunction<void Function(int)>();

  void wire_main_remove_trusted_devices(
    int port_,
    ffi.Pointer<wire_uint_8_list> json,
  ) {
    return _wire_main_remove_trusted_devices(
      port_,
      json,
    );
  }

  late final _wire_main_remove_trusted_devicesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_main_remove_trusted_devices');
  late final _wire_main_remove_trusted_devices =
      _wire_main_remove_trusted_devicesPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_main_clear_trusted_devices(
    int port_,
  ) {
    return _wire_main_clear_trusted_devices(
      port_,
    );
  }

  late final _wire_main_clear_trusted_devicesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_main_clear_trusted_devices');
  late final _wire_main_clear_trusted_devices =
      _wire_main_clear_trusted_devicesPtr.asFunction<void Function(int)>();

  WireSyncReturn wire_main_max_encrypt_len() {
    return _wire_main_max_encrypt_len();
  }

  late final _wire_main_max_encrypt_lenPtr =
      _lookup<ffi.NativeFunction<WireSyncReturn Function()>>(
          'wire_main_max_encrypt_len');
  late final _wire_main_max_encrypt_len =
      _wire_main_max_encrypt_lenPtr.asFunction<WireSyncReturn Function()>();

  void wire_session_request_new_display_init_msgs(
    int port_,
    ffi.Pointer<wire_uint_8_list> session_id,
    int display,
  ) {
    return _wire_session_request_new_display_init_msgs(
      port_,
      session_id,
      display,
    );
  }

  late final _wire_session_request_new_display_init_msgsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.UintPtr)>>('wire_session_request_new_display_init_msgs');
  late final _wire_session_request_new_display_init_msgs =
      _wire_session_request_new_display_init_msgsPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  ffi.Pointer<wire_StringList> new_StringList_0(
    int len,
  ) {
    return _new_StringList_0(
      len,
    );
  }

  late final _new_StringList_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_StringList> Function(ffi.Int32)>>(
      'new_StringList_0');
  late final _new_StringList_0 = _new_StringList_0Ptr
      .asFunction<ffi.Pointer<wire_StringList> Function(int)>();

  ffi.Pointer<wire_int_32_list> new_int_32_list_0(
    int len,
  ) {
    return _new_int_32_list_0(
      len,
    );
  }

  late final _new_int_32_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_int_32_list> Function(ffi.Int32)>>(
      'new_int_32_list_0');
  late final _new_int_32_list_0 = _new_int_32_list_0Ptr
      .asFunction<ffi.Pointer<wire_int_32_list> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();

  bool rustdesk_core_main() {
    return _rustdesk_core_main();
  }

  late final _rustdesk_core_mainPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('rustdesk_core_main');
  late final _rustdesk_core_main =
      _rustdesk_core_mainPtr.asFunction<bool Function()>();

  void handle_applicationShouldOpenUntitledFile() {
    return _handle_applicationShouldOpenUntitledFile();
  }

  late final _handle_applicationShouldOpenUntitledFilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'handle_applicationShouldOpenUntitledFile');
  late final _handle_applicationShouldOpenUntitledFile =
      _handle_applicationShouldOpenUntitledFilePtr
          .asFunction<void Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> rustdesk_core_main_args(
    ffi.Pointer<ffi.Int> args_len,
  ) {
    return _rustdesk_core_main_args(
      args_len,
    );
  }

  late final _rustdesk_core_main_argsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Int>)>>('rustdesk_core_main_args');
  late final _rustdesk_core_main_args = _rustdesk_core_main_argsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Int>)>();

  void free_c_args(
    ffi.Pointer<ffi.Pointer<ffi.Char>> ptr,
    int len,
  ) {
    return _free_c_args(
      ptr,
      len,
    );
  }

  late final _free_c_argsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('free_c_args');
  late final _free_c_args = _free_c_argsPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int get_rustdesk_app_name(
    ffi.Pointer<ffi.Uint16> buffer,
    int length,
  ) {
    return _get_rustdesk_app_name(
      buffer,
      length,
    );
  }

  late final _get_rustdesk_app_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint16>, ffi.Int32)>>('get_rustdesk_app_name');
  late final _get_rustdesk_app_name = _get_rustdesk_app_namePtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint16>, int)>();

  ffi.Pointer<ffi.Uint8> session_get_rgba(
    ffi.Pointer<ffi.Uint32> session_uuid_str,
    int display,
  ) {
    return _session_get_rgba(
      session_uuid_str,
      display,
    );
  }

  late final _session_get_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint32>, ffi.UintPtr)>>('session_get_rgba');
  late final _session_get_rgba = _session_get_rgbaPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint32>, int)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_int_32_list extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_StringList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_uint_8_list>> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

const int VIDEO_QUEUE_SIZE = 120;

const int AUDIO_BUFFER_MS = 150;

const int CLIPBOARD_INTERVAL = 333;

const int ERR_SUCCESS = 0;

const int ERR_RUSTDESK_HANDLE_BASE = 10000;

const int ERR_PLUGIN_LOAD = 10001;

const int ERR_PLUGIN_MSG_INIT = 10101;

const int ERR_PLUGIN_MSG_INIT_INVALID = 10102;

const int ERR_PLUGIN_MSG_GET_LOCAL_PEER_ID = 10103;

const int ERR_PLUGIN_SIGNATURE_NOT_VERIFIED = 10104;

const int ERR_PLUGIN_SIGNATURE_VERIFICATION_FAILED = 10105;

const int ERR_CALL_UNIMPLEMENTED = 10201;

const int ERR_CALL_INVALID_METHOD = 10202;

const int ERR_CALL_NOT_SUPPORTED_METHOD = 10203;

const int ERR_CALL_INVALID_PEER = 10204;

const int ERR_CALL_INVALID_ARGS = 10301;

const int ERR_PEER_ID_MISMATCH = 10302;

const int ERR_CALL_CONFIG_VALUE = 10303;

const int ERR_NOT_HANDLED = 10401;

const int ERR_CALLBACK_HANDLE_BASE = 20000;

const int ERR_CALLBACK_PLUGIN_ID = 20001;

const int ERR_CALLBACK_INVALID_ARGS = 20002;

const int ERR_CALLBACK_INVALID_MSG = 20003;

const int ERR_CALLBACK_TARGET = 20004;

const int ERR_CALLBACK_TARGET_TYPE = 20005;

const int ERR_CALLBACK_PEER_NOT_FOUND = 20006;

const int ERR_CALLBACK_FAILED = 21001;

const int ERR_PLUGIN_HANDLE_BASE = 30000;

const int EER_CALL_FAILED = 30021;

const int ERR_PEER_ON_FAILED = 40012;

const int ERR_PEER_OFF_FAILED = 40012;

const int INVALID_PRIVACY_MODE_CONN_ID = 0;
